{"version":3,"sources":["../../src/utils/errors.ts","../../src/utils/common.ts","../../src/types/types-internal.ts","../../src/utils/plugins.ts","../../src/core/scope.ts","../../src/core/finalize.ts","../../src/core/proxy.ts","../../src/core/immerClass.ts","../../src/core/current.ts","../../src/immer.ts","../../src/utils/env.ts","../../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../src/utils/weak-maps.ts","../../src/create-editor.ts","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../src/utils/string.ts","../../src/interfaces/element.ts","../../src/interfaces/editor.ts","../../src/interfaces/location.ts","../../src/interfaces/node.ts","../../src/interfaces/operation.ts","../../src/interfaces/path.ts","../../src/interfaces/path-ref.ts","../../src/interfaces/point.ts","../../src/interfaces/point-ref.ts","../../src/interfaces/range.ts","../../src/interfaces/range-ref.ts","../../src/interfaces/text.ts","../../src/transforms/node.ts","../../src/transforms/selection.ts","../../src/transforms/text.ts","../../src/transforms/index.ts","../../src/transforms/general.ts","../node_modules/is-plain-object/index.es.js","../node_modules/esrever/esrever.js"],"names":["die","error","args","msg","Error","length","map","s","join","isDraft","value","DRAFT_STATE","isDraftable","proto","Object","getPrototypeOf","Ctor","hasOwnProperty","call","constructor","Function","toString","objectCtorString","Array","isArray","DRAFTABLE","isMap","isSet","each","obj","iter","enumerableOnly","getArchtype","keys","ownKeys","forEach","key","entry","index","thing","state","type_","has","prop","prototype","get","set","propOrOldValue","t","delete","add","is","x","y","target","hasMap","Map","hasSet","Set","latest","copy_","base_","shallowCopy","base","slice","descriptors","getOwnPropertyDescriptors","i","desc","writable","configurable","enumerable","create","freeze","deep","isFrozen","clear","dontMutateFrozenCollections","getPlugin","pluginKey","plugin","plugins","getCurrentScope","currentScope","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","drafts_","revokeDraft","parent_","enterScope","immer","immer_","canAutoFreeze_","unfinalizedDrafts_","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","useProxies_","willFinalizeES5_","modified_","finalize","maybeFreeze","generateReplacementPatches_","NOTHING","rootScope","path","childValue","finalizeProperty","scope_","finalized_","draft_","generatePatches_","parentState","targetObject","rootPath","res","assigned_","concat","undefined","autoFreeze_","peek","getDescriptorFromProto","source","getOwnPropertyDescriptor","markChanged","prepareCopy","createProxy","parent","proxyMap_","proxySet_","isManual_","traps","objectTraps","arrayTraps","Proxy","revocable","revoke","proxy","createES5Proxy_","push","copyHelper","archType","from","hasSymbol","Symbol","hasProxies","Reflect","for","iterator","getOwnPropertySymbols","getOwnPropertyNames","current","currentState","deleteProperty","owner","defineProperty","setPrototypeOf","fn","arguments","apply","this","e","config","recipe","defaultBase","self","_this","produce","_this2","hasError","Promise","then","arg1","arg2","produceWithPatches","p","ip","patches","inversePatches","useProxies","setUseProxies","autoFreeze","setAutoFreeze","createDraft","currentImpl","copy","hasChanges_","finishDraft","applyPatches","patch","op","applyPatchesImpl","applyPatches_","bind","_defineProperty","DIRTY_PATHS","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","createEditor","editor","children","operations","selection","marks","isInline","isVoid","onChange","Editor","PathRef","PointRef","RangeRef","dirtyPaths","oldDirtyPaths","newDirtyPaths","getDirtyPaths","Path","Transforms","addMark","Range","match","Text","split","deleteBackward","unit","reverse","deleteForward","deleteFragment","direction","getFragment","Node","insertBreak","always","insertFragment","fragment","insertNode","node","insertText","text","inline","n","mode","point","anchor","focus","normalizeNode","Element","at","voids","shouldHaveInlines","currentNode","child","prev","isLast","loose","removeMark","levels","descendants","ancestors","previousPath","newPath","oldAncestors","newAncestors","newParent","newIndex","resultPath","nextPath","_objectWithoutProperties","excluded","sourceKeys","indexOf","objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","SPACE","PUNCTUATION","CHAMELEON","getCharacterDistance","offset","charCode","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","started","char","l","rest","isWordCharacter","next","remaining","code","SURROGATE_START","isAncestor","isPlainObject","isElement","isElementList","val","isElementProps","props","matches","element","IS_EDITOR_CACHE","above","options","after","edge","range","distance","d","before","edges","end","first","hasBlocks","hasInlines","hasTexts","isBlock","isEditor","cachedIsEditor","Operation","isEnd","Point","isEdge","isEmpty","isNormalizing","isStart","start","last","leaf","isText","block","pointAfterLocation","span","universal","Span","to","nodeEntries","pass","isLower","hit","emit","normalize","force","allPaths","dirtyPath","max","m","parentPath","depth","hasPath","pathRef","affinity","ref","unref","pathRefs","refs","pointRef","pointRefs","isNewBlock","blockText","leafTextRemaining","leafTextOffset","reverseText","isFirst","calcDistance","previous","pointBeforeLocation","rangeRef","rangeRefs","string","unhangRange","endBlock","blockPath","skip","void","withoutNormalizing","Location","isLocation","isSpan","IS_NODE_LIST_CACHE","ancestor","JSON","c","root","childPath","common","descendant","extractProps","r","isNode","isNodeList","cachedResult","visited","nextIndex","isNodeOperation","isOperation","isOperationList","isSelectionOperation","isTextOperation","inverse","type","inversePath","inverseNewPath","newProperties","properties","paths","another","av","compare","min","Math","endsAfter","as","bs","bv","endsAt","endsBefore","equals","hasPrevious","isAfter","isBefore","isChild","isCommon","isDescendant","isParent","isPath","isSibling","list","relative","transform","operation","position","onp","isPoint","includes","isAfterStart","isBeforeEnd","intersection","isBackward","isCollapsed","isExpanded","isForward","isRange","affinityAnchor","affinityFocus","isEqual","omitText","isTextList","isTextProps","decorations","leaves","o","middle","off","NodeTransforms","insertNodes","hanging","select","nodes","isAtEnd","liftNodes","matchPath","parentNodeEntry","toPath","splitPath","mergeNodes","prevPath","commonPath","isPreviousSibling","emptyAncestor","hasSingleChildNest","emptyRef","prevNode","moveNodes","toRef","targets","removeNodes","depths","setNodes","splitMode","endAtEndOfNode","startAtStartOfNode","k","splitNodes","height","deleteRange","beforeRef","voidMatch","afterPath","voidPath","afterRef","lowestPath","highestPath","unsetNodes","unwrapNodes","wrapNodes","a","commonNodeEntry","wrapperPath","lastPath","wrapper","commonNode","SelectionTransforms","collapse","deselect","move","opts","setPoint","setSelection","oldProps","newProps","TextTransforms","furthestVoid","endOfDoc","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","isInlineStart","isInlineEnd","middleRef","truePath","newNode","applyToDraft","isObjectObject","ctor","prot","freeExports","exports","freeGlobal","module","global","window","regexSymbolWithCombiningMarks","regexSurrogatePair","esrever","replace","$0","$1","$2","charAt","define"],"mappings":";iyBA4CgBA,EAAIC,8BAA+BC,mDAQtBC,MAElBC,MAAMA,8BACeH,GAC7BC,EAAKG,OAAS,IAAMH,EAAKI,KAAI,sBAASC,SAAMC,KAAK,KAAO,iECpC3CC,EAAQC,WACdA,KAAWA,EAAMC,YAKXC,EAAYF,WACtBA,aAawBA,OACxBA,GAA0B,iBAAVA,EAAoB,OAAO,MAC1CG,EAAQC,OAAOC,eAAeL,MACtB,OAAVG,WACI,IAEFG,EACLF,OAAOG,eAAeC,KAAKL,EAAO,gBAAkBA,EAAMM,kBAE3C,mBAARH,GACPI,SAASC,SAASH,KAAKF,KAAUM,EAvB7BZ,CAEUA,IACda,MAAMC,QAAQd,MACZA,EAAMe,MACNf,EAAMS,YAAYM,IACpBC,EAAMhB,IACNiB,EAAMjB,IAuDR,SAAgBkB,EAAKC,EAAUC,EAAWC,sBCtEZ,IDuEzBC,EAAYH,IACbE,EAAiBjB,OAAOmB,KAAOC,IAASL,GAAKM,SAAQ,YACjDJ,GAAiC,iBAARK,GAAkBN,EAAKM,EAAKP,EAAIO,GAAMP,MAGrEA,EAAIM,SAAQ,SAACE,EAAYC,UAAeR,EAAKQ,EAAOD,EAAOR,eAK7CG,EAAYO,OAErBC,EAAgCD,EAAM5B,UACrC6B,EACJA,EAAMC,EAAQ,EACbD,EAAMC,EAAQ,EACbD,EAAMC,EACRlB,MAAMC,QAAQe,GCvFW,EDyFzBb,EAAMa,GCxFiB,ED0FvBZ,EAAMY,GCzFiB,EAHG,WDkGdG,EAAIH,EAAYI,UChGL,IDiGnBX,EAAYO,GAChBA,EAAMG,IAAIC,GACV7B,OAAO8B,UAAU3B,eAAeC,KAAKqB,EAAOI,YAIhCE,EAAIN,EAA2BI,UCvGpB,IDyGnBX,EAAYO,GAAyBA,EAAMM,IAAIF,GAAQJ,EAAMI,GAIrE,SAAgBG,EAAIP,EAAYQ,EAA6BrC,OACtDsC,EAAIhB,EAAYO,GC9GI,ID+GtBS,EAAmBT,EAAMO,IAAIC,EAAgBrC,GC9GvB,ID+GjBsC,GACRT,EAAMU,OAAOF,GACbR,EAAMW,IAAIxC,IACJ6B,EAAMQ,GAAkBrC,WAIhByC,EAAGC,EAAQC,UAEtBD,IAAMC,EACI,IAAND,GAAW,EAAIA,GAAM,EAAIC,EAEzBD,GAAMA,GAAKC,GAAMA,WAKV3B,EAAM4B,UACdC,GAAUD,aAAkBE,aAIpB7B,EAAM2B,UACdG,GAAUH,aAAkBI,aAGpBC,EAAOnB,UACfA,EAAMoB,GAASpB,EAAMqB,WAIbC,EAAYC,MACvBxC,MAAMC,QAAQuC,GAAO,OAAOxC,MAAMqB,UAAUoB,MAAM9C,KAAK6C,OACrDE,EAAcC,GAA0BH,UACvCE,EAAYtD,WACfsB,EAAOC,GAAQ+B,GACVE,EAAI,EAAGA,EAAIlC,EAAK5B,OAAQ8D,IAAK,KAC/B/B,EAAWH,EAAKkC,GAChBC,EAAOH,EAAY7B,QACrBgC,EAAKC,WACRD,EAAKC,YACLD,EAAKE,kBAKFF,EAAKvB,KAAOuB,EAAKtB,OACpBmB,EAAY7B,GAAO,CAClBkC,gBACAD,YACAE,WAAYH,EAAKG,WACjB7D,MAAOqD,EAAK3B,YAGRtB,OAAO0D,OAAO1D,OAAOC,eAAegD,GAAOE,YAWnCQ,EAAU5C,EAAU6C,6BAC/BC,EAAS9C,IAAQpB,EAAQoB,KAASjB,EAAYiB,KAC9CG,EAAYH,GAAO,IACtBA,EAAIiB,IAAMjB,EAAIqB,IAAMrB,EAAI+C,MAAQ/C,EAAIoB,OAAS4B,GAE9C/D,OAAO2D,OAAO5C,GACV6C,GAAM9C,EAAKC,GAAK,SAACO,EAAK1B,UAAU+D,EAAO/D,SAAO,IALamB,EAShE,SAASgD,IACR7E,EAAI,YAGW2E,EAAS9C,UACb,MAAPA,GAA8B,iBAARA,GAEnBf,OAAO6D,SAAS9C,YEtKRiD,EACfC,OAEMC,EAASC,GAAQF,UAClBC,GACJhF,EAAI,GAAI+E,GAGFC,EC7BR,SAAgBE,WAERC,WAkBQC,EACfC,EACAC,GAEIA,IACHR,EAAU,WACVO,EAAME,EAAW,GACjBF,EAAMG,EAAkB,GACxBH,EAAMI,EAAiBH,YAITI,EAAYL,GAC3BM,EAAWN,GACXA,EAAMO,EAAQzD,QAAQ0D,GAEtBR,EAAMO,EAAU,cAGDD,EAAWN,GACtBA,IAAUF,IACbA,EAAeE,EAAMS,YAIPC,EAAWC,UAClBb,EArCD,CACNS,EAAS,GACTE,EAmCkCX,EAlClCc,EAkCgDD,EA/BhDE,KACAC,EAAoB,GAiCtB,SAASN,EAAYO,OACd5D,EAAoB4D,EAAMzF,GFtDG,IEwDlC6B,EAAMC,GFvD2B,IEwDjCD,EAAMC,EAEND,EAAM6D,IACF7D,EAAM8D,KAAW,SC7DPC,EAAcC,EAAanB,GAC1CA,EAAMc,EAAqBd,EAAMO,EAAQvF,WACnCoG,EAAYpB,EAAMO,EAAS,GAC3Bc,WAAaF,GAAwBA,IAAWC,SACjDpB,EAAMY,EAAOU,GACjB7B,EAAU,OAAO8B,EAAiBvB,EAAOmB,EAAQE,GAC9CA,GACCD,EAAU9F,GAAakG,IAC1BnB,EAAYL,GACZrF,EAAI,IAEDY,EAAY4F,KAEfA,EAASM,EAASzB,EAAOmB,GACpBnB,EAAMS,GAASiB,EAAY1B,EAAOmB,IAEpCnB,EAAME,GACTT,EAAU,WAAWkC,EACpBP,EAAU9F,GACV6F,EACAnB,EAAME,EACNF,EAAMG,IAKRgB,EAASM,EAASzB,EAAOoB,EAAW,IAErCf,EAAYL,GACRA,EAAME,GACTF,EAAMI,EAAgBJ,EAAME,EAAUF,EAAMG,GAEtCgB,IAAWS,EAAUT,SAG7B,SAASM,EAASI,EAAuBxG,EAAYyG,MAEhDxC,EAASjE,GAAQ,OAAOA,MAEtB8B,EAAoB9B,EAAMC,OAE3B6B,SACJZ,EACClB,GACA,SAAC0B,EAAKgF,UACLC,EAAiBH,EAAW1E,EAAO9B,EAAO0B,EAAKgF,EAAYD,SAGtDzG,KAGJ8B,EAAM8E,IAAWJ,EAAW,OAAOxG,MAElC8B,EAAMqE,SACVE,EAAYG,EAAW1E,EAAMqB,MACtBrB,EAAMqB,MAGTrB,EAAM+E,EAAY,CACtB/E,EAAM+E,KACN/E,EAAM8E,EAAOnB,QACPK,EH1D0B,IG4D/BhE,EAAMC,GH3DwB,IG2DQD,EAAMC,EACxCD,EAAMoB,EAAQE,EAAYtB,EAAMgF,GACjChF,EAAMoB,EAKVhC,EHhE0B,IGiEzBY,EAAMC,EAAyB,IAAIiB,IAAI8C,GAAUA,GACjD,SAACpE,EAAKgF,UACLC,EAAiBH,EAAW1E,EAAOgE,EAAQpE,EAAKgF,EAAYD,MAG9DJ,EAAYG,EAAWV,MAEnBW,GAAQD,EAAU3B,GACrBT,EAAU,WAAW2C,EACpBjF,EACA2E,EACAD,EAAU3B,EACV2B,EAAU1B,UAINhD,EAAMoB,EAGd,SAASyD,EACRH,EACAQ,EACAC,EACAhF,EACAyE,EACAQ,MAGInH,EAAQ2G,GAAa,KASlBS,EAAMf,EAASI,EAAWE,EAP/BQ,GACAF,GHhGyB,IGiGzBA,EAAajF,IACZC,EAAKgF,EAA8CI,EAAYnF,GAC7DiF,EAAUG,OAAOpF,WACjBqF,GAGJlF,EAAI6E,EAAchF,EAAMkF,IAGpBpH,EAAQoH,GAEL,OADNX,EAAUhB,KAAiB,GAIzBtF,EAAYwG,KAAgBzC,EAASyC,GAAa,KAChDF,EAAUjB,EAAOgC,GAAef,EAAUf,EAAqB,SAQpEW,EAASI,EAAWE,GAEfM,GAAgBA,EAAYJ,EAAOxB,GACvCiB,EAAYG,EAAWE,IAI1B,SAASL,EAAY1B,EAAmB3E,EAAYgE,sBAC/CW,EAAMY,EAAOgC,GAAe5C,EAAMa,GACrCzB,EAAO/D,EAAOgE,GCqEhB,SAASwD,EAAK9B,EAAgBzD,OACvBH,EAAQ4D,EAAMzF,UACL6B,EAAQmB,EAAOnB,GAAS4D,GACzBzD,GAcf,SAASwF,EACRC,EACAzF,MAGMA,KAAQyF,UACVvH,EAAQC,OAAOC,eAAeqH,GAC3BvH,GAAO,KACPuD,EAAOtD,OAAOuH,yBAAyBxH,EAAO8B,MAChDyB,EAAM,OAAOA,EACjBvD,EAAQC,OAAOC,eAAeF,aAKhByH,EAAY9F,GACtBA,EAAMqE,IACVrE,EAAMqE,KACFrE,EAAMsD,GACTwC,EAAY9F,EAAMsD,aAKLyC,EAAY/F,GACtBA,EAAMoB,IACVpB,EAAMoB,EAAQE,EAAYtB,EAAMqB,IC3DlC,SAAgB2E,EACfxC,EACAtF,EACA+H,OAGMrC,EAAiB1E,EAAMhB,GAC1BoE,EAAU,UAAU4D,EAAUhI,EAAO+H,GACrC9G,EAAMjB,GACNoE,EAAU,UAAU6D,EAAUjI,EAAO+H,GACrCzC,EAAMW,WD1KT5C,EACA0E,OAEMjH,EAAUD,MAAMC,QAAQuC,GACxBvB,EAAoB,CACzBC,EAAOjB,EJ/B0B,EADC,EIkClC8F,EAAQmB,EAASA,EAAOnB,EAASpC,IAEjC2B,KAEAU,KAEAO,EAAW,GAEXhC,EAAS2C,EAET5E,EAAOE,EAEPyD,EAAQ,KAER5D,EAAO,KAEPyC,EAAS,KACTuC,MASGtF,EAAYd,EACZqG,EAA2CC,GAC3CtH,IACH8B,EAAS,CAACd,GACVqG,EAAQE,UAGeC,MAAMC,UAAU3F,EAAQuF,GAAzCK,WAAQC,iBACf3G,EAAMgF,EAAS2B,EACf3G,EAAM6D,EAAU6C,EACTC,EC+HExC,CACWjG,EAAO+H,GACxB3D,EAAU,OAAOsE,EAAgB1I,EAAO+H,UAE7BA,EAASA,EAAOnB,EAASpC,KACjCU,EAAQyD,KAAKjD,GACZA,ECjLR,SAASkD,EAAW5I,EAAY6I,UAEvBA,QN/BkB,SMiCjB,IAAI/F,IAAI9C,QNhCS,SMmCjBa,MAAMiI,KAAK9I,UAEboD,EAAYpD,GCiDZA,MLlFJyE,EMrBEsE,EACa,oBAAXC,QAAiD,iBAAhBA,OAAO,KACnCnG,EAAwB,oBAARC,IAChBC,EAAwB,oBAARC,IAChBiG,EACK,oBAAVX,gBACAA,MAAMC,WACM,oBAAZW,QAKK3C,EAAmBwC,EAC7BC,OAAOG,IAAI,yBACR,oBAAkB,GAUXpI,EAA2BgI,EACrCC,OAAOG,IAAI,mBACV,qBAESlJ,EAA6B8I,EACvCC,OAAOG,IAAI,eACV,iBTGEvI,GSCa,oBAAVoI,QAAyBA,OAAOI,STDhBhJ,UAAO8B,UAAUzB,aAyB7Be,GACO,oBAAZ0H,SAA2BA,QAAQ1H,QACvC0H,QAAQ1H,iBACDpB,OAAOiJ,sBACd,mBACAjJ,OAAOkJ,oBAAoBnI,GAAKkG,OAC/BjH,OAAOiJ,sBAAsBlI,KAEHf,OAAOkJ,oBAEzB9F,GACZpD,OAAOoD,2BACP,SAAmCZ,OAE5BuE,EAAW,UACjB3F,GAAQoB,GAAQnB,SAAQ,YACvB0F,EAAIzF,GAAOtB,OAAOuH,yBAAyB/E,EAAQlB,MAE7CyF,GEhEH5C,GA4BF,GGuDS6D,GAAwC,CACpDjG,aAAIL,EAAOG,MACNA,IAAShC,EAAa,OAAO6B,MAE3B4F,EAASzE,EAAOnB,OACjBE,EAAI0F,EAAQzF,UAgInB,SAA2BH,EAAmB4F,EAAazF,SACpDyB,EAAO+D,EAAuBC,EAAQzF,UACrCyB,EACJ,UAAWA,EACVA,EAAK1D,gBAGL0D,EAAKvB,wBAALuB,EAAUlD,KAAKsB,EAAMgF,UAP1B,CA9H4BhF,EAAO4F,EAAQzF,OAEnCjC,EAAQ0H,EAAOzF,UACjBH,EAAM+E,IAAe3G,EAAYF,GAC7BA,EAIJA,IAAUwH,EAAK1F,EAAMqB,EAAOlB,IAC/B4F,EAAY/F,GACJA,EAAMoB,EAAOjB,GAAe6F,EACnChG,EAAM8E,EAAOrB,EACbvF,EACA8B,IAGK9B,GAERgC,aAAIF,EAAOG,UACHA,KAAQgB,EAAOnB,IAEvBN,iBAAQM,UACAoH,QAAQ1H,QAAQyB,EAAOnB,KAE/BM,aACCN,EACAG,EACAjC,OAEM0D,EAAO+D,EAAuBxE,EAAOnB,GAAQG,MAC/CyB,iBAAMtB,WAGTsB,EAAKtB,IAAI5B,KAAKsB,EAAMgF,EAAQ9G,MACrB,IAEH8B,EAAMqE,EAAW,KAGfoD,EAAU/B,EAAKvE,EAAOnB,GAAQG,GAE9BuH,EAAiCD,iBAAUtJ,MAC7CuJ,GAAgBA,EAAarG,IAAUnD,SAC1C8B,EAAMoB,EAAOjB,GAAQjC,EACrB8B,EAAMsF,EAAUnF,OAAQ,EACjB,GAEJQ,EAAGzC,EAAOuJ,cAAavJ,GAAuBgC,EAAIF,EAAMqB,EAAOlB,IAClE,OAAO,EACR4F,EAAY/F,GACZ8F,EAAY9F,UAGTA,EAAMoB,EAAOjB,KAAUjC,GAA0B,iBAAVA,IAG3C8B,EAAMoB,EAAOjB,GAAQjC,EACrB8B,EAAMsF,EAAUnF,OAAQ,IAGzBwH,wBAAe3H,EAAOG,mBAEjBuF,EAAK1F,EAAMqB,EAAOlB,IAAuBA,KAAQH,EAAMqB,GAC1DrB,EAAMsF,EAAUnF,MAChB4F,EAAY/F,GACZ8F,EAAY9F,WAGLA,EAAMsF,EAAUnF,GAGpBH,EAAMoB,UAAcpB,EAAMoB,EAAMjB,OAKrC0F,kCAAyB7F,EAAOG,OACzByH,EAAQzG,EAAOnB,GACf4B,EAAOwF,QAAQvB,yBAAyB+B,EAAOzH,UAChDyB,EACE,CACNC,YACAC,aJpKgC,IIoKlB9B,EAAMC,GAA0C,WAATE,EACrD4B,WAAYH,EAAKG,WACjB7D,MAAO0J,EAAMzH,IALIyB,GAQnBiG,0BACCrK,EAAI,KAELe,wBAAeyB,UACP1B,OAAOC,eAAeyB,EAAMqB,IAEpCyG,0BACCtK,EAAI,MAQA+I,GAA8C,GACpDnH,EAAKkH,IAAa,SAAC1G,EAAKmI,GAEvBxB,GAAW3G,GAAO,kBACjBoI,UAAU,GAAKA,UAAU,GAAG,GACrBD,EAAGE,MAAMC,KAAMF,eAGxBzB,GAAWoB,eAAiB,SAAS3H,EAAOG,UAEpCmG,GAAYqB,eAAgBjJ,KAAKwJ,KAAMlI,EAAM,GAAIG,IAEzDoG,GAAWjG,IAAM,SAASN,EAAOG,EAAMjC,UAE/BoI,GAAYhG,IAAK5B,KAAKwJ,KAAMlI,EAAM,GAAIG,EAAMjC,EAAO8B,EAAM,SGzM3DwD,GAAQ,IFYd,oBAAA2E,EAKaC,qBAJWjB,YAEA,aA4BH,SAAC5F,EAAW8G,EAAcvF,MAEzB,mBAATvB,GAAyC,mBAAX8G,EAAuB,KACzDC,EAAcD,EACpBA,EAAS9G,MAEHgH,EAAOC,SACN,SAENjH,6BAAO+G,8BACJ5K,0DAEI6K,EAAKE,QAAQlH,GAAM,SAACqC,kBAAmByE,GAAO3J,cAAKgK,EAAM9E,UAAUlG,YAQxEsG,KAJkB,mBAAXqE,GAAuB7K,EAAI,YAClCsF,GAAwD,mBAAlBA,GACzCtF,EAAI,GAKDY,EAAYmD,GAAO,KAChBsB,EAAQU,EAAWiF,GACnB7B,EAAQX,EAAYwC,EAAMjH,UAC5BoH,KAAW,IAEd3E,EAASqE,EAAO1B,GAChBgC,KAHc,QAMVA,EAAUzF,EAAYL,GACrBM,EAAWN,SAEM,oBAAZ+F,SAA2B5E,aAAkB4E,QAChD5E,EAAO6E,MACb,mBACCjG,EAAkBC,EAAOC,GAClBiB,EAAcC,EAAQnB,MAE9B,kBACCK,EAAYL,GACNpF,MAITmF,EAAkBC,EAAOC,GAClBiB,EAAcC,EAAQnB,IACvB,IAAKtB,GAAwB,iBAATA,EAAmB,KAC7CyC,EAASqE,EAAO9G,MACDkD,EAAS,uBACpBT,IAAsBA,EAASzC,GAC/BiH,EAAK/C,GAAaxD,EAAO+B,MACtBA,EACDxG,EAAI,GAAI+D,4BAG0B,SACzCuH,EACAC,SAGoB,mBAATD,EACH,SAAC9I,8BAAetC,0DACtB8K,EAAKQ,mBAAmBhJ,GAAO,SAAC4D,UAAekF,gBAAKlF,UAAUlG,QAQzD,CAJW8K,EAAKC,QAAQK,EAAMC,GAAM,SAACE,EAAYC,GACvDC,EAAUF,EACVG,EAAiBF,KAECC,EAAUC,OALzBD,EAAkBC,GA7FY,kBAAvBhB,iBAAQiB,aAClBnB,KAAKoB,cAAclB,EAAQiB,YACM,kBAAvBjB,iBAAQmB,aAClBrB,KAAKsB,cAAcpB,EAAQmB,uCAkG7BE,qBAAiClI,GAC3BnD,EAAYmD,IAAO/D,EAAI,GACxBS,EAAQsD,KAAOA,EAoFbqC,SCjNgB1F,UAClBD,EAAQC,IAAQV,EAAI,GAAIU,GAI9B,SAASwL,EAAYxL,OACfE,EAAYF,GAAQ,OAAOA,MAE5ByL,EADE3J,EAAgC9B,EAAMC,GAEtC4I,EAAWvH,EAAYtB,MACzB8B,EAAO,KAERA,EAAMqE,IACNrE,EAAMC,EAAQ,IAAMqC,EAAU,OAAOsH,EAAY5J,IAElD,OAAOA,EAAMqB,EAEdrB,EAAM+E,KACN4E,EAAO7C,EAAW5I,EAAO6I,GACzB/G,EAAM+E,UAEN4E,EAAO7C,EAAW5I,EAAO6I,UAG1B3H,EAAKuK,GAAM,SAAC/J,EAAKgF,GACZ5E,GAASK,EAAIL,EAAMqB,EAAOzB,KAASgF,GACvCtE,EAAIqJ,EAAM/J,EAAK8J,EAAY9E,ONtBF,IMyBnBmC,EAA2B,IAAI7F,IAAIyI,GAAQA,EAxBnD,CAHoBzL,GD2HQuJ,CAAQlG,QAC5BsB,EAAQU,EAAW2E,MACnBvB,EAAQX,EAAYkC,KAAM3G,UAAMiE,OACtCmB,EAAMxI,GAAaiI,KACnBjD,EAAWN,GACJ8D,KAGRkD,qBACCjG,EACAd,OAOeD,GALWe,GAAUA,EAAczF,IAK3C2G,SACPlC,EAAkBC,EAAOC,GAClBiB,SAAyBlB,MAQjC2G,uBAActL,QACRuH,EAAcvH,KASpBoL,uBAAcpL,GACTA,IAAUiJ,GACb3J,EAAI,SAEA2G,EAAcjG,KAGpB4L,sBAAavI,EAAiB4H,OAGzBxH,MACCA,EAAIwH,EAAQtL,OAAS,EAAG8D,GAAK,EAAGA,IAAK,KACnCoI,EAAQZ,EAAQxH,MACI,IAAtBoI,EAAMpF,KAAK9G,QAA6B,YAAbkM,EAAMC,GAAkB,CACtDzI,EAAOwI,EAAM7L,iBAKT+L,EAAmB3H,EAAU,WAAW4H,SAC1CjM,EAAQsD,GAEJ0I,EAAiB1I,EAAM4H,GAGxBjB,KAAKO,QAAQlH,GAAM,SAACqC,UAC1BqG,EAAiBrG,EAAOuF,EAAQ3H,MAAMG,EAAI,UA5K7C,IESa8G,GAAoBjF,GAAMiF,QAqC1BgB,IA9B0CjG,GAAMwF,mBAAmBmB,KAC/E3G,IAQ4BA,GAAMgG,cAAcW,KAAK3G,IAQzBA,GAAM8F,cAAca,KAAK3G,IAO1BA,GAAMsG,aAAaK,KAAK3G,IAMzBA,GAAMiG,YAAYU,KAAK3G,KAUrCqG,GAAcrG,GAAMqG,YAAYM,KAAK3G,I,qBE1FnC,SAAS4G,GAAgB/K,EAAKO,EAAK1B,GAYhD,OAXI0B,KAAOP,EACTf,OAAOuJ,eAAexI,EAAKO,EAAK,CAC9B1B,MAAOA,EACP6D,YAAY,EACZD,cAAc,EACdD,UAAU,IAGZxC,EAAIO,GAAO1B,EAGNmB,ECVF,IAAMgL,GAAuC,IAA7C,QACMC,GAAqC,IAA3C,QACMC,GAAwC,IAA9C,QACMC,GAA2C,IAAjD,QACMC,GAA6C,IAAnD,QACMC,GAA6C,IAAnD,Q,wkBCcMC,GAAe,WAC1B,IAAMC,EAAiB,CACrBC,SADqB,GAErBC,WAFqB,GAGrBC,UAHqB,KAIrBC,MAJqB,KAKrBC,SAAU,kBALW,GAMrBC,OAAQ,kBANa,GAOrBC,SAAU,aAEVlD,MAAQ+B,YAAD,oBACaoB,YAAlB,IADK,IACL,2BAA2C,KAA3C,EAA2C,QACzCC,mBAFG,kDAKaD,aAAlB,IALK,IAKL,2BAA4C,KAA5C,EAA4C,QAC1CE,mBANG,kDASaF,aAAlB,IATK,IASL,2BAA4C,KAA5C,EAA4C,QAC1CG,mBAVG,8BAaL,IAbK,EAaCjL,EAAM,IAAZ,IACMkL,EAAN,GAEM9K,EAAOiE,YACX,KAAU,CACR,IAAM/E,EAAM+E,OAAZ,KAEKrE,MAAL,KACEA,SACAkL,aAKAC,EAAgBpB,WAAtB,GACMqB,EAAgBC,GAAtB,GA5BK,cA8BL,GA9BK,IA8BL,2BAAkC,KAAlC,EAAkC,QAEhCjL,EADgBkL,eAAhB,KA/BG,kDAmCL,GAnCK,IAmCL,2BAAkC,CAChClL,EADgC,UAnC7B,8BAuCL2J,YACAwB,kBACAjB,qBACAQ,gBAGA,kBAAIpB,SACFY,cAGGN,OAAL,KACEA,aAEA1B,wBAAuB,WACrB0B,aACAM,aACAA,qBAKNkB,QAAS,cACP,IAAQf,EAAR,EAAQA,UAER,KACE,GAAIgB,cAAJ,GACEF,6BAEI,EAAO3N,GACT,CAAE8N,MAAOC,GAAT,OAAsBC,OAAO,QAE1B,CACL,IAAMlB,EAAQ,GAAH,MACLI,aADK,sBAET,EAAOlN,IAGT0M,UACKN,OAAL,IACEM,eAMRuB,eAAiBC,YACf,IAAQrB,EAAR,EAAQA,UAEJA,GAAagB,eAAjB,IACEF,YAA0B,CAAEO,OAAMC,SAAS,KAI/CC,cAAgBF,YACd,IAAQrB,EAAR,EAAQA,UAEJA,GAAagB,eAAjB,IACEF,YAA0B,CAAEO,UAIhCG,eAAiBC,YACf,IAAQzB,EAAR,EAAQA,UAEJA,GAAagB,cAAjB,IACEF,YAA0B,CAAEQ,QAAuB,aAAdG,KAIzCC,YAAa,WACX,IAAQ1B,EAAR,EAAQA,UAER,SACS2B,cAAP,GAEF,IAGFC,YAAa,WACXd,gBAA8B,CAAEe,QAAQ,KAG1CC,eAAiBC,YACfjB,wBAGFkB,WAAaC,YACXnB,qBAGFoB,WAAaC,YACX,IAAM,EAAN,EAAM,UAAalC,EAAnB,EAAmBA,MAEnB,KAAe,CAGb,GAAIe,eAAJ,GAAkC,CAChC,IAAMoB,EAAS/B,GAAA,QAAqB,CAClCY,MAAOoB,YAAC,OAAIhC,cADsB,IAElCiC,KAAM,YAGR,KAAY,CACV,IAAM,EAAN,oBAEA,GAAIjC,WAAqBL,EAArBK,OAAJ,GAAwD,CACtD,IAAMkC,EAAQlC,WAAd,GACAS,kBAAgC,CAC9B0B,OAD8B,EAE9BC,MAAOF,MAMf,KAAW,CACT,IAAMN,EAAO,GAAH,CAAKE,QAAf,GACArB,yBAEAA,mBAGFjB,eAIJ6C,cAAgB5N,YACd,uBAAM,EAAN,KAAM,EAAN,KAGA,IAAIoM,UAAJ,GAKA,GAAIyB,iBAAJ,IAA+BV,kBAA/B,CAEEnB,iBADc,CAAEqB,KAAM,IACgB,CACpCS,GAAIhJ,SADgC,GAEpCiJ,OAAO,SAkBX,IAZA,IAAMC,GAAoBzC,iBAEtBsC,kBACC9C,mBACCoC,mBACAf,UAAYe,WAFbpC,KAGCA,WAAgBoC,WANtB,MAUII,EAAJ,EAESzL,EAAT,EAAgBA,EAAIqL,WAApB,OAA0CrL,IAAKyL,IAAK,CAClD,IAAMU,EAAcpB,SAApB,GACA,IAAIT,UAAJ,IACA,IAAM8B,EAAQf,WAAd,GACMgB,EAAOF,WAAqBV,EAAlC,GACMa,EAAStM,IAAMqL,kBAArB,EASA,IAPEf,cACCyB,iBAA4B9C,WARmB,MAclD,EACEiB,iBAA+B,CAAE8B,GAAIhJ,SAAN,GAAsBiJ,OAAO,IAC5DR,SACK,GAAIM,aAAJ,IAEL,GAAI9C,WAAJ,GACE,GAAIoD,SAAiB/B,UAArB,IAOO,GAAIgC,EAAQ,CAEjBpC,iBADiB,CAAEqB,KAAM,IACgB,CACvCS,GAAIhJ,SAAYyI,EADuB,GAEvCQ,OAAO,IAETR,SAbsC,CAEtCvB,iBADiB,CAAEqB,KAAM,IACgB,CACvCS,GAAIhJ,SADmC,GAEvCiJ,OAAO,IAETR,UAYAY,SAAgB/B,UAApB,KACMA,GAAA,WAAyB,CAAEiC,OAAO,KACpCrC,gBAA8B,CAAE8B,GAAIhJ,SAAN,GAAsBiJ,OAAO,IAC3DR,KACK,KAAIY,QACTnC,iBAA+B,CAC7B8B,GAAIhJ,SAAYyI,EADa,GAE7BQ,OAAO,IAETR,KACSa,GAAJ,KAAcF,SACnBlC,iBAA+B,CAC7B8B,GAAIhJ,SADyB,GAE7BiJ,OAAO,IAETR,SAOVe,WAAavO,YACX,IAAQmL,EAAR,EAAQA,UAER,KACE,GAAIgB,cAAJ,GACEF,kBAAmC,CACjCG,MAAOC,GAD0B,OAEjCC,OAAO,QAEJ,CACL,IAAMlB,EAAQ,GAAH,GAASI,aAApB,WACOJ,EAAP,GACAJ,UACKN,OAAL,IACEM,gBAOV,UAOIe,GAAiB3B,YACrB,OAAQA,EAAR,MACE,kBACA,kBACA,eACE,IAAQrF,EAAR,EAAQA,KACR,OAAOiH,UAAP,GAGF,kBACE,IAAM,EAAN,EAAM,KAAQjH,EAAd,EAAcA,KACRyJ,EAASxC,UAAf,GACMyC,EAAcpC,gBAEhBlN,MAAA,KAAW2N,SAAX,IAA6B,6CAAW/H,SAAX,MAEjC,4BAAO,GAAP,gBAGF,iBACE,IAAQA,EAAR,EAAQA,KACF2J,EAAY1C,aAAlB,GACM2C,EAAe3C,YAArB,GACA,4BAAO,GAAP,KAGF,gBACE,IAAM,EAAN,EAAQjH,KAAM6J,EAAd,EAAcA,QAEd,GAAI5C,YAAJ,GACE,SAGF,IAPgB,EAOV6C,EAAN,GACMC,EAAN,GARgB,cAUO9C,aAAvB,IAVgB,IAUhB,2BAA6C,KAA7C,EAA6C,QACrC3C,EAAI2C,eAAV,GACA6C,WAZc,kDAeO7C,aAAvB,IAfgB,IAehB,2BAAgD,KAAhD,EAAgD,QACxC3C,EAAI2C,eAAV,GACA8C,WAjBc,8BAoBhB,IAAMC,EAAYD,EAAaA,SAA/B,GACME,EAAWJ,EAAQA,SAAzB,GACMK,EAAaF,SAAnB,GAEA,gBAAO,IAAP,KAGF,kBACE,IAAQhK,EAAR,EAAQA,KACF2J,EAAY1C,aAAlB,GACA,sBAGF,iBACE,IAAQjH,EAAR,EAAQA,KACFyJ,EAASxC,UAAf,GACMkD,EAAWlD,QAAjB,GACA,4BAAO,GAAP,KAGF,QACE,WC7XS,SAASmD,GAAyBnJ,EAAQoJ,GACvD,GAAc,MAAVpJ,EAAgB,MAAO,GAC3B,IACIhG,EAAK+B,EADLb,ECHS,SAAuC8E,EAAQoJ,GAC5D,GAAc,MAAVpJ,EAAgB,MAAO,GAC3B,IAEIhG,EAAK+B,EAFLb,EAAS,GACTmO,EAAa3Q,OAAOmB,KAAKmG,GAG7B,IAAKjE,EAAI,EAAGA,EAAIsN,EAAWpR,OAAQ8D,IACjC/B,EAAMqP,EAAWtN,GACbqN,EAASE,QAAQtP,IAAQ,IAC7BkB,EAAOlB,GAAOgG,EAAOhG,IAGvB,OAAOkB,EDTMqO,CAA6BvJ,EAAQoJ,GAGlD,GAAI1Q,OAAOiJ,sBAAuB,CAChC,IAAI6H,EAAmB9Q,OAAOiJ,sBAAsB3B,GAEpD,IAAKjE,EAAI,EAAGA,EAAIyN,EAAiBvR,OAAQ8D,IACvC/B,EAAMwP,EAAiBzN,GACnBqN,EAASE,QAAQtP,IAAQ,GACxBtB,OAAO8B,UAAUiP,qBAAqB3Q,KAAKkH,EAAQhG,KACxDkB,EAAOlB,GAAOgG,EAAOhG,IAIzB,OAAOkB,EEbT,IAAMwO,GAAN,KACMC,GAAN,qyCACMC,GAAN,kBASaC,GAAwBvC,YAWnC,IAVA,IAAIwC,EAAJ,EAOI1B,EAAJ,KACI2B,EAAWzC,aAAf,GAEA,GACE,GAAI0C,GAAJ,IACE,IAAMC,EAAWC,GAAWH,EAAUzC,EADb,GAMzB,GAAIc,YAAJ,QAAuBA,EACrB,MAGF0B,KACA1B,EAAO6B,EAAW,MAAlB7B,OACA2B,EAAWzC,aAZc,QAkB3B,GApCJ,OAoCQyC,EAQJ,GAAII,GAAJ,IACE,GAAI/B,WAAQA,GAAZ,QAA8BA,EAC5B,MAEF0B,KACA1B,QACA2B,EAAWzC,aAAXyC,OANF,CAWA,IAAIK,GAAJ,IAYA,WAAIhC,EAAgB,CAClB0B,KACA,MAIF,MAjBE,GAAI1B,GAAJ,QAAYA,EACV,MAEF0B,KACA1B,QACA2B,EAAWzC,aAAXyC,QAxBAD,KACA1B,QACA2B,EAAWzC,aAAXyC,GAqCJ,OAAOD,GAAP,GAOWO,GAAmB/C,YAM9B,IALA,IAGA,EAHIrP,EAAJ,EACI8D,EAAJ,EACIuO,GAAJ,EAGQC,EAAOjD,SAAf,IAAgC,CAC9B,IAAMkD,EAAIX,GAAV,GACAU,EAAOjD,UAAcvL,EAArBwO,GACA,IAAME,EAAOnD,QAAWvL,EAAxB,GAEA,GAAI2O,GAAgBH,EAApB,GACED,KACArS,SACK,MAGL,MAFAA,KAKF8D,KAGF,UAQI2O,GAAkB,SAAlBA,EAAmBH,EAAD,GACtB,GAAIb,QAAJ,GACE,SAKF,GAAIE,QAAJ,GAA0B,CACxB,IAAIe,EAAOC,SAAX,GACM3S,EAAS4R,GAAf,GAIA,GAAIa,EAHJC,EAAOC,UAAPD,GACaC,QAAb,IAGE,SAIJ,OAAIjB,QAAJ,IAWIK,GAAea,YAAD,OAjJpB,OAkJEC,GAA2BD,GAjJ7B,OAyJMX,GAAa,SAACW,EAAD,KACjB,WAAIA,EAAiB,CACnB,IAAMF,EAAOrD,aAAgBwC,EAA7B,GACA,OAAOa,UAAkBA,GAAzB,MAEF,UASIP,GAAuBS,YAC3B,OAAOA,UAAkBA,GAAzB,OASIV,GAAcU,YAKlB,OACEA,kBACAA,GADAA,OAEAA,GAFAA,OAGAA,GAHAA,OAIAA,GAJAA,OAKAA,GANF,OAOEA,GC9KS/C,GAA4B,CAKvCiD,WALuC,SAK7B,GACR,OAAOC,gBAAwBlE,cAAgBxO,EAA/C,WAOF2S,UAbuC,SAa9B,GACP,OACED,gBACAlE,cAAgBxO,EADhB0S,YAECxF,YAHH,IAWF0F,cAzBuC,SAyB1B,GACX,OAAO/R,kBAAwBb,SAAY6S,YAAG,OAAIrD,aAAlD,OAOFsD,eAjCuC,SAiCzB,GACZ,gBAAQC,YAUVC,QA5CuC,SA4ChC,KACL,IAAK,IAAL,OACE,gBAAItR,GAIAuR,OAAiBF,EAArB,GACE,SAIJ,W,okBC4MJ,IAAMG,GAAkB,IAAxB,QAEahG,GAA0B,CAKrCiG,MALqC,SAKhC,G,IAEHC,yDAKI,GAEJ,IACE1D,aADF,aAEEP,YAFF,MAAM,SAAN,MAGEM,UAHF,MAGO/C,EAHD,UAAN,EAIEoB,EAJF,EAIEA,MAGF,MAIA,IApBG,EAoBGrH,EAAOyG,UAAb,GACMiB,EAAN,WAAgBgB,EArBb,cAuBkBjC,GAAA,SAAsB,CACzCuC,GADyC,EAEzCC,QACA5B,QACAK,aA3BC,IAuBH,2BAKI,8BALO,EAKP,KALJ,EAKI,KACF,IAAKJ,UAAD,KAAoBL,YAAxB,GACE,MAAO,CAACwB,EAAR,IA9BD,iCA0CLtB,QA/CqC,SA+C9B,OACLlB,gBAOF2G,MAvDqC,SAuDhC,K,IAcH,EAdG,EAGHD,yDAII,GAEE/D,EAASnC,GAAA,UAAyB,CAAEoG,KAAM,QAC1ChE,EAAQpC,SAAd,IACMqG,EAAQ,CAAElE,SAAQC,SACxB,IAAQkE,gBAAR,MAAmB,EAAnB,EACIC,EAAJ,EAbG,cAgBavG,GAAA,4BAEduC,GAAI8D,MAlBH,IAgBH,2BAGI,KAHJ,EAGI,QACF,GAAIE,EAAJ,EACE,MAGF,IAAIA,IACF7Q,KAGF6Q,KA5BC,8BA+BH,UAOFC,OA7FqC,SA6F/B,K,IAcJ,EAdI,EAGJN,yDAII,GAEE/D,EAASnC,WAAf,IACMoC,EAAQpC,GAAA,UAAyB,CAAEoG,KAAM,UACzCC,EAAQ,CAAElE,SAAQC,SACxB,IAAQkE,gBAAR,MAAmB,EAAnB,EACIC,EAAJ,EAbI,cAgBYvG,GAAA,4BAEduC,GAFc,EAGdtB,SAAS,MAnBP,IAgBJ,2BAII,KAJJ,EAII,QACF,GAAIsF,EAAJ,EACE,MAGF,IAAIA,IACF7Q,KAGF6Q,KA7BE,8BAgCJ,UAOFxF,eApIqC,SAoIvB,G,IAEZmF,yDAEI,GAEJ,IAAQlF,YAAR,MAAe,YAAf,EACAxB,qBAOF0B,cAlJqC,SAkJxB,G,IAEXgF,yDAEI,GAEJ,IAAQlF,YAAR,MAAe,YAAf,EACAxB,oBAOF2B,eAhKqC,SAgKvB,G,IAEZ+E,yDAEI,GAEJ,IAAQ9E,iBAAR,MAAoB,UAApB,EACA5B,qBAOFiH,MA9KqC,SA8KhC,KACH,MAAO,CAACzG,WAAD,GAA2BA,SAAlC,KAOF0G,IAtLqC,SAsLlC,KACD,OAAO1G,GAAA,UAAyB,CAAEoG,KAAM,SAO1CO,MA9LqC,SA8LhC,KACH,IAAMpN,EAAOyG,GAAA,SAAwB,CAAEoG,KAAM,UAC7C,OAAOpG,UAAP,IAOF0B,SAvMqC,SAuM7B,KACN,IAAM2E,EAAQrG,WAAd,GACM0B,EAAWJ,cAAjB,GACA,UAMFsF,UAhNqC,SAgN5B,KACP,OAAOb,iBAAsB/D,YAAC,OAAIhC,aAAlC,OAOF6G,WAxNqC,SAwN3B,KACR,OAAOd,iBACL/D,YAAC,OAAInB,cAAkBb,cADzB,OASF8G,SAlOqC,SAkO7B,KACN,OAAOf,kBAAuB/D,YAAC,OAAInB,UAAnC,OASFU,YA5OqC,SA4O1B,GACT/B,iBASFiC,eAtPqC,SAsPvB,KACZjC,qBASFmC,WAhQqC,SAgQ3B,KACRnC,iBASFqC,WA1QqC,SA0Q3B,KACRrC,iBAOFuH,QAlRqC,SAkR9B,KACL,OAAOzE,kBAA6B9C,WAApC,IAOFwH,SA1RqC,SA0R7B,GACN,IAAKxB,YAAL,GAA2B,OAAO,EAClC,IAAMyB,EAAiBjB,OAAvB,GACA,YAAIiB,EACF,SAEF,IAAMD,EACJ,oBAAOlU,EAAP,6BACOA,EAAP,OADA,oBAEOA,EAAP,gBAFA,oBAGOA,EAAP,eAHA,oBAIOA,EAAP,gBAJA,oBAKOA,EAAP,aALA,oBAMOA,EAAP,gBANA,oBAOOA,EAAP,YAPA,oBAQOA,EAAP,YARA,oBASOA,EAAP,UATA,oBAUOA,EAAP,QAVA,oBAWOA,EAAP,eAXA,oBAYOA,EAAP,UAZA,oBAaOA,EAAP,aACCA,gBAAwB0S,YAAc1S,EAdvC,UAeCA,oBAA4B6N,WAAc7N,EAf3C,aAgBAwO,cAAgBxO,EAhBhB,WAiBAoU,mBAA0BpU,EAlB5B,YAoBA,OADAkT,YACA,GAOFmB,MA3TqC,SA2ThC,OACH,IAAMT,EAAM1G,SAAZ,GACA,OAAOoH,YAAP,IAOFC,OApUqC,SAoU/B,OACJ,OAAOrH,mBAAqCA,aAA5C,IAOFsH,QA5UqC,SA4U9B,KACL,IAAQ7H,EAAR,EAAQA,SACF,EAAN,oBACA,OACEA,cACCA,cACCoB,UADDpB,SAECkH,SACCnH,SALL,IAaFK,SA5VqC,SA4V7B,KACN,OAAOyC,iBAA4B9C,WAAnC,IAOF+H,cApWqC,SAoWxB,GACX,IAAMA,EAAgBpI,OAAtB,GACA,YAAOoI,OAAP,GAOFC,QA7WqC,SA6W9B,OAEL,OAAItF,SACF,SAGF,IAAMuF,EAAQzH,WAAd,GACA,OAAOoH,YAAP,IAOFtH,OA3XqC,SA2X/B,KACJ,OAAOwC,iBAA4B9C,SAAnC,IAOFkI,KAnYqC,SAmYjC,KACF,IAAMnO,EAAOyG,GAAA,SAAwB,CAAEoG,KAAM,QAC7C,OAAOpG,UAAP,IAOF2H,KA5YqC,SA4YjC,K,IAGFzB,yDAGI,GAEE3M,EAAOyG,YAAb,GACM4B,EAAON,UAAb,GACA,MAAO,CAACM,EAAR,IAOF,OA7ZqC,mBA6ZrC,GA7ZqC,kHA+ZnCsE,iCAKI,GApa+B,EAsanC,EAAQ3D,UAta2B,MAsatB/C,EAAP,UAta6B,IAsanC,EAA+ByB,eAtaI,WAsanC,EAAgDuB,aAtab,SAyanC,OAFM5B,EAAN,EAAMA,SAGJA,EAAQ,kBAARA,IAGF,EA7amC,iDAib7BoC,EAAN,GACMzJ,EAAOyG,UAAb,GAlbmC,cAobdsB,YAArB,IApbmC,sFAobxB,EApbwB,KAobnC,EApbmC,KAqb5BV,EAAMoB,EAAX,GArbiC,2DAybjCgB,OAAY,CAAChB,EAAbgB,IAEKR,IAASxC,YAAd,GA3biC,6LAocnC,OAJA,GACEgD,YAGF,2BApcmC,+DA2crCpD,MA3cqC,SA2chC,GACH,IAAM,EAAN,EAAM,MAASD,EAAf,EAAeA,UAEf,MACE,YAGF,KACE,SAGF,GAAIgB,cAAJ,GAAiC,CAC/B,MAAgBX,GAAA,QAAqB,CAAEY,MAAOC,GAAK+G,SAA7C,EAAN,oBAEA,SAEE,GADA,oBACA,UAGA,GAIJ,IAAQzF,EAAR,EAAQA,OACA5I,EAAR,EAAQA,KACR,EAAayG,UAAb,GAAI,EAAJ,oBAEA,OAAImC,SAAqB,CACvB,IAAMS,EAAO5C,GAAA,WAAwB,CAAEuC,GAAF,EAAY3B,MAAOC,GAAK+G,SACvDC,EAAQ7H,GAAA,QAAqB,CACjCY,MAAOoB,YAAC,OAAIhC,mBAGd,GAAI4C,GAAJ,EAAmB,CACjB,uBAAM,EAAN,KAAM,EAAN,KACM,EAAN,oBAEIpC,gBAAJ,KACEoB,MAMN,OADA,gBAQFuD,KA9fqC,SA8fjC,G,IAEFe,yDAKI,GAEJ,IAAQjE,YAAR,MAAM,SAAN,MAAyBO,aAAzB,SACI,EAAJ,EAAI,MAAJ,IAAaD,UAAb,MAAkB/C,EAAOG,UAAzB,EAEA,MAIA,IAAMmI,EAAqB9H,GAAA,UAAyB,CAAEwC,UAEtD,MAEA,MAAexC,UAAf,uBAAM,EAAN,KAEM+H,EAAa,CAACD,EAAD,KAAnB,GAEA,GAAItH,cAAJ,IAAuB+B,SACrB,MAAM,IAAI/P,MAAV,gDAGF,SAAIoO,EACF,GAAIJ,UAAJ,GAAqB,CACnB,MAAiBR,YAAjB,sBAAM,EAAN,KACAY,EAAQoB,YAAC,OAAInH,oBAAb+F,SAEAA,EAAQ,kBAARA,GAIJ,MAAeZ,GAAA,QAAqB,CAAEuC,GAAF,EAAY3B,QAAOqB,OAAMO,UAA7D,mBAAM,EAAN,KACA,YAOFZ,KA3iBqC,SA2iBjC,K,IAGFsE,yDAGI,GAEE3M,EAAOyG,YAAb,GACM4B,EAAON,SAAb,GACA,MAAO,CAACM,EAAR,IAOF,MA5jBqC,qBA4jBrC,GA5jBqC,wIA8jBnCsE,iCAOI,GArkB+B,EAukBnC,EACE3D,UAxkBiC,MAwkB5B/C,EADD,UAvkB6B,IAukBnC,EAEEyC,YAzkBiC,MAukB7B,MAvkB6B,IAukBnC,EAGE+F,iBA1kBiC,WAukBnC,EAIE/G,eA3kBiC,WAukBnC,EAKEuB,aA5kBiC,UA8kB7B5B,EAAN,EAAMA,SAGJA,EAAQ,kBAARA,IAGF,EAplBmC,iDA2lB/BqH,UAAJ,IACErM,EAAO2G,EAAP3G,GACAsM,EAAK3F,EAAL2F,KAEMvB,EAAQ3G,GAAA,SAAwB,CAAEoG,KAAM,UACxCsB,EAAO1H,GAAA,SAAwB,CAAEoG,KAAM,QAC7CxK,EAAOqF,EAAUyG,EAAjB9L,EACAsM,EAAKjH,EAAU0F,EAAfuB,GAGIC,EAAc7G,GAAA,QAAmB,CACrCL,UACArF,OACAsM,KACAE,KAAM,6CAAU5F,GAAgBxC,YAA1B,MAGF8F,EAAN,GA5mBmC,cA+mBnC,GA/mBmC,uFA+mBxB,EA/mBwB,KA+mBnC,EA/mBmC,KAgnB3BuC,EAAUC,GADsB,IACf9H,aAAmB8H,EAAnB9H,IAGnByB,gBAAJ,EAnnBiC,2DAunB5BrB,EAAMgB,EAAX,GAvnBiC,qBA2nB3BoG,OAAyBnH,UAA7B,GA3nB+B,6FAmoB7BoB,eAAJ,EAnoBiC,wBAooB/BqG,EAAM,CAAC1G,EAAP0G,GApoB+B,qCAyoB3BC,EACJtG,eAA0B,CAACL,EAD7B,IAzoBiC,qBA6oB/B,EA7oB+B,iBA8oB7BkE,UA9oB6B,wBAgpB7B,OAhpB6B,UAgpB7B,EAhpB6B,QAopBjCwC,EAAM,CAAC1G,EAAP0G,GAppBiC,oJAwpB/BrG,eAAJ,EAxpBmC,qBAypBjC,EAzpBiC,iBA0pB/B6D,UA1pB+B,wBA4pB/B,OA5pB+B,UA4pB/B,EA5pB+B,YAkqBnC,EAlqBmC,iBAmqBjC,kCAnqBiC,gEA0qBrC0C,UA1qBqC,SA0qB5B,G,IAEPtC,yDAEI,GAEJ,IAAQuC,aAAR,SACMlI,EAAiBf,YACrB,OAAOP,WAAP,IAGF,GAAKe,iBAAL,IAIA,KAAW,CACT,IAAM0I,EAAW/U,MAAA,KAAW2N,SAAX,IAA+B,0CAChDrC,YAGF,IAAIsB,aAIJP,yBAAkC,+BAMRO,EAAxB,IANgC,IAMhC,2BAA+C,KAA/C,EAA+C,QAC7C,GAAIe,SAAJ,GAAiC,CAC/B,MAAkBtB,UADa,GAC/B,mBAAM,EAAN,UAIA,GAAIsC,iBAAJ,IAA+BV,kBAA4B,CAEzDnB,iBADc,CAAEqB,KAAM,IACgB,CACpCS,GAAIoG,SADgC,GAEpCnG,OAAO,OAhBiB,8BAyBhC,IAHA,IAAMoG,EAAN,GAAYrI,YACRsI,EAAJ,EAEA,IAAOtI,aAAoC,CACzC,GAAIsI,EAAJ,EACE,MAAM,IAAIrW,MAAM,iEAAV,SAAN,0HAKF,IAAMmW,EAAYpI,KAPuB,MAUzC,GAAIe,SAAJ,GAAiC,CAC/B,IAAM7M,EAAQuL,UAAd,GACAR,mBAEFqJ,UASNhO,OAlvBqC,SAkvB/B,K,IAGJqL,yDAGI,GAEE3M,EAAOyG,YAAb,GACM8I,EAAatI,UAAnB,GACM/L,EAAQuL,UAAd,GACA,UAOFzG,KApwBqC,SAowBjC,K,IAGF2M,yDAGI,GAEE,EAAN,EAAM,MAASE,EAAf,EAAeA,KAEf,GAAI5F,UAAJ,GACE,aAAI4F,EAAkB,CACpB,MAAsB9E,WAAtB,sBAAM,EAAN,KACAiB,SACK,WAAI6D,EAAgB,CACzB,MAAqB9E,UAArB,sBAAM,EAAN,KACAiB,IAsBJ,OAlBI5B,WAAJ,KAEI4B,EADF,UAAI6D,EACGzF,SAAL4B,GACK,QAAI6D,EACJzF,OAAL4B,GAEK/B,UAAY+B,SAAZ/B,KAA4B+B,QAAjCA,OAIA6E,WAAJ,KACE7E,EAAKA,EAALA,MAGF,MAAIwG,IACFxG,EAAKA,UAALA,IAGF,GAGFyG,QA7yBqC,SA6yB9B,KACL,OAAO1H,SAAP,IAQF2H,QAtzBqC,SAszB9B,K,IAGL/C,yDAEI,GAEJ,IAAQgD,gBAAR,MAAmB,UAAnB,EACMC,EAAe,CACnB9M,QADmB,EAEnB6M,WACAE,MAHmB,WAIjB,IAAQ/M,EAAR,EAAQA,QAIR,OAHiB2D,YAAjB,GACAqJ,UACAF,eACA,IAIEG,EAAOtJ,YAAb,GAEA,OADAsJ,SACA,GAOFD,SAn1BqC,SAm1B7B,GACN,IAAIC,EAAOlK,OAAX,GAOA,OALA,IACEkK,EAAO,IAAPA,IACAlK,aAGF,GAOF8C,MAl2BqC,SAk2BhC,K,IAGHgE,yDAEI,GAEJ,IAAQE,YAAR,MAAe,QAAf,EAEA,GAAI5F,UAAJ,GAAqB,CACnB,MAEA,WAAI4F,EAAgB,CAClB,MAAqB9E,UAArB,sBAAM,EAAN,KACA/H,QACK,CACL,MAAsB+H,WAAtB,sBAAM,EAAN,KACA/H,IAGF,IAAMqI,EAAON,SAAb,GAEA,IAAKT,UAAL,GACE,MAAM,IAAIrO,MAAM,kBAAV,mFAAN,gBAKF,MAAO,CAAE+G,OAAM+K,OAAQ8B,UAAiBxE,OAAjBwE,OAAoC,GAG7D,GAAIzF,WAAJ,GAAuB,CACrB,MAAqBA,SAArB,sBAAM,EAAN,KAAM,EAAN,KACA,MAAOyF,cAAP,EAGF,UAQFmD,SA94BqC,SA84B7B,K,IAGNrD,yDAEI,GAEJ,IAAQgD,gBAAR,MAAmB,UAAnB,EACMC,EAAgB,CACpB9M,QADoB,EAEpB6M,WACAE,MAHoB,WAIlB,IAAQ/M,EAAR,EAAQA,QAIR,OAHkB2D,aAAlB,GACAwJ,UACAL,eACA,IAIEG,EAAOtJ,aAAb,GAEA,OADAsJ,SACA,GAOFE,UA36BqC,SA26B5B,GACP,IAAIF,EAAOjK,OAAX,GAOA,OALA,IACEiK,EAAO,IAAPA,IACAjK,aAGF,GAgBF,UAn8BqC,qBAm8BrC,GAn8BqC,4DAwmCnC,EAxmCmC,gFAwmCnC,EAxmCmC,SAwmCnC,KACE,oBAAI2B,EACKqD,GAAP,GACK,SAAIrD,EACF6D,GAAP,GACS7D,YAAJ,UAAuBA,EACrBc,EAAP,OAEF,GA3KFoE,iCAKI,GA18B+B,EA48BnC,EACE3D,UA78BiC,MA68B5B/C,EADD,UA58B6B,IA48BnC,EAEEwB,YA98BiC,MA48B7B,SA58B6B,IA48BnC,EAGEC,eA/8BiC,WA48BnC,EAIEuB,aAh9BiC,SAm9BnC,EAn9BmC,iDAy+B7B6D,EAAQrG,WAAd,GAz+BmC,EA0+BdW,SAArB,GA1+BmC,mBA0+B7B,EA1+B6B,KA0+B7B,EA1+B6B,KA2+B7BgG,EAAQ1F,EAAUyF,EAAxB,EACI+C,GAAJ,EACIC,EAAJ,GACIpD,EAAJ,EACIqD,EAAJ,EACIC,EAAJ,EAh/BmC,cAw/BR5J,GAAA,QAAqB,CAAEuC,KAAItB,QAAN,EAAeuB,WAx/B5B,uFAw/BxB,EAx/BwB,KAw/BnC,EAx/BmC,MA4/B7BF,aAAJ,GA5/BiC,oBAggC1BE,IAAShD,SAAd,GAhgC+B,iBAigC7B,OAjgC6B,UAigCvBQ,WAAN,GAjgC6B,mDAwgC3BR,WAZuB,GA5/BI,wDA2gC3BQ,gBAAJ,KAYQjD,EAAIyD,gBAAsBkG,EAAtBlG,QAENR,SAFJ,GAGMrN,EAAI6N,gBAAsBiH,EAAtBjH,QAENR,WAFJ,GAIA0J,EAAY1J,GAAA,SAAsB,CAAEmC,OAAF,EAAaC,MAAOrF,GAAK,CAAEyF,UAC7DkH,EAAYzI,EAAU4I,kBAAH,GAAnBH,EACAD,MAhiC6B,YAwiC7B5I,UAAJ,GAxiCiC,qBAyiCzBiJ,EAAUtJ,YAAkBmG,EADb,QAUnBgD,EAAoB1I,EAChB0F,EADuB,OAEvB/E,cAAmB+E,EAFvBgD,OAGAC,EAAiBjD,EAJN,SAMXgD,EAAoB/H,OAApB+H,OACAC,EAAiB3I,EAAU0I,EAA3BC,IAIEE,OAAJ,WAA6B9I,EA5jCE,iBA6jC7B,OA7jC6B,UA6jCvB,CAAEzH,OAAM+K,OAAQsF,GA7jCO,QA8jC7BH,KA9jC6B,WAskC7B,IAAInD,EAtkCyB,oBAukC3B,KAAIoD,EAvkCuB,qDAwkC3BpD,EAAWyD,EAAaL,EAAxBpD,GACAoD,EAAYA,QAAZA,GAzkC2B,WA6kC7BE,EAAiB3I,EACb2I,EADoB,EAEpBA,EAFJA,KAGAD,GAdW,GAmBX,GArlC6B,wBAslC3BrD,KAtlC2B,6BA8lC7B,OADAA,IA7lC6B,UA8lCvB,CAAE/M,OAAM+K,OAAQsF,GA9lCO,iOAwnCrCI,SAxnCqC,SAwnC7B,G,IAEN9D,yDAKI,GAEJ,IAAQjE,YAAR,MAAM,SAAN,MAAyBO,aAAzB,SACI,EAAJ,EAAI,MAAJ,IAAaD,UAAb,MAAkB/C,EAAOG,UAAzB,EAEA,MAIA,IAAMsK,EAAsBjK,GAAA,WAA0B,CAAEwC,UAExD,MAIA,MAAexC,WAAf,uBAAM,EAAN,KAIM+H,EAAa,CAACkC,EAAD,KAAnB,GAEA,GAAIzJ,cAAJ,IAAuB+B,SACrB,MAAM,IAAI/P,MAAV,oDAGF,SAAIoO,EACF,GAAIJ,UAAJ,GAAqB,CACnB,MAAiBR,YAAjB,sBAAM,EAAN,KACAY,EAAQoB,YAAC,OAAInH,oBAAb+F,SAEAA,EAAQ,kBAARA,GAIJ,MAAmBZ,GAAA,QAAqB,CACtCiB,SADsC,EAEtCsB,GAFsC,EAGtC3B,QACAqB,OACAO,UALF,mBAAM,EAAN,KAQA,YAOF6D,MAhrCqC,SAgrChC,OACH,OAAI1F,gBAAJ,EACE,EAKK,CAAEwB,OAFKnC,WAAd,GAEwBoC,MADZpC,SAAmBkI,GAA/B,KASFgC,SA/rCqC,SA+rC7B,K,IAGNhE,yDAEI,GAEJ,IAAQgD,gBAAR,MAAmB,UAAnB,EACMC,EAAgB,CACpB9M,QADoB,EAEpB6M,WACAE,MAHoB,WAIlB,IAAQ/M,EAAR,EAAQA,QAIR,OAHkB2D,aAAlB,GACAmK,UACAhB,eACA,IAIEG,EAAOtJ,aAAb,GAEA,OADAsJ,SACA,GAOFa,UA5tCqC,SA4tC5B,GACP,IAAIb,EAAOhK,OAAX,GAOA,OALA,IACEgK,EAAO,IAAPA,IACAhK,aAGF,GAWFyD,WA/uCqC,SA+uC3B,KACRvD,iBAOFiI,MAvvCqC,SAuvChC,KACH,OAAOzH,GAAA,UAAyB,CAAEoG,KAAM,WAU1CgE,OAlwCqC,SAkwC/B,K,IAAA,EAGJlE,yDAEI,GAEJ,IAAQ1D,aAAR,SACM6D,EAAQrG,WAAd,GACA,EAAqBW,SAArB,sBAAM,EAAN,KAAM,EAAN,KACImB,EAAJ,GAVI,cAYuB9B,GAAA,QAAqB,CAC9CuC,GAD8C,EAE9C3B,MAAOC,GAFuC,OAG9C2B,WAfE,IAYJ,2BAII,8BAJO,EAIP,KAJJ,EAII,KACEpN,EAAIwM,EAAR,KAEIpB,YAAkBkG,EAAtB,QACEtR,EAAIA,UAAWsR,EAAftR,SAGEoL,YAAkBiH,EAAtB,QACErS,EAAIA,QAAQqS,EAAZrS,SAGF0M,MA3BE,8BA8BJ,UAOFuI,YAvyCqC,SAuyC1B,K,IAGTnE,yDAEI,GAEJ,IAAQ1D,aAAR,SACA,EAAmB7B,SAAnB,sBAAI,EAAJ,KAAI,EAAJ,KAGA,GAAI8G,kBAAsBf,UAAoB/F,eAA9C,GACE,SAGF,IAfS,EAeH2J,EAAWtK,GAAA,QAAqB,CACpCuC,GADoC,EAEpC3B,MAAOoB,YAAC,OAAIhC,mBAERuK,EAAYD,EAAWA,EAAH,GAA1B,GACM3D,EAAQ3G,WAAd,IACMwG,EAAS,CAAErE,OAAF,EAAiBC,MAAOsE,GACnC8D,GAAJ,EAtBS,cAwBkBxK,GAAA,QAAqB,CAC9CuC,GAD8C,EAE9C3B,MAAOC,GAFuC,OAG9CI,SAH8C,EAI9CuB,WA5BO,IAwBT,2BAKI,8BALO,EAKP,KALJ,EAKI,KACF,KACEgI,UAIF,GAAI5I,aAAoBpB,cAAxB,GAAwD,CACtDkG,EAAM,CAAEnN,OAAM+K,OAAQ1C,OAAUnP,QAChC,QArCK,8BAyCT,MAAO,CAAE0P,OAAF,EAAiBC,MAAOsE,IAOjC+D,KAv1CqC,SAu1CjC,G,IAEFvE,yDAII,GAEJ,OAAOlG,GAAA,wBAELY,MAAOoB,YAAC,OAAIhC,oBAQhB0K,mBAz2CqC,SAy2CnB,KAChB,IAAM5X,EAAQkN,iBAAd,GACAb,aACA,IACExC,IADF,QAGEwC,YAEFa,kBC5nDS2K,GAA8B,CAKzCC,WALyC,SAK/B,GACR,OAAOpK,cAAsB4G,WAAtB5G,IAA8CG,WAArD,KAeSsH,GAAsB,CAKjC4C,OALiC,SAK3B,GACJ,OACElX,sBAAwBb,UAAsBA,QAAY0N,GAD5D,UC4CEsK,GAAqB,IAA3B,QAEaxJ,GAAsB,CAKjCyJ,SALiC,SAKzB,KACN,IAAMnJ,EAAON,SAAb,GAEA,GAAIT,UAAJ,GACE,MAAM,IAAIrO,MAAM,yCAAV,gEAAN,IAKF,UAUF,UAxBiC,qBAwBjC,KAxBiC,6FA2B/B0T,iCAEI,GA7B2B,cA+Bf1F,eAAhB,IA/B+B,yDAkC7B,OAHF,EA/B+B,QAgCvBwB,EAAIV,cAAV,GACM7M,EAA6B,CAACuN,EAApC,GAjC6B,UAkC7B,EAlC6B,sMA0CjCW,MA1CiC,SA0C5B,KACH,GAAI9B,UAAJ,GACE,MAAM,IAAIrO,MAAM,wCAAV,OACoCwY,eAD1C,KAKF,IAAMC,EAAIC,WAAV,GAEA,SAAID,EACF,MAAM,IAAIzY,MAAM,8BAAV,+BAC+CwY,eADrD,KAOF,UAOF,SAlEiC,mBAkEjC,KAlEiC,iGAqE/B9E,iCAEI,GAvE2B,EAyE/B,EAAQjF,eAzEuB,SA0EzB8J,EAAWzJ,cAAjB,GACQ7B,EAAR,EAAQA,SACJ/K,EAAQuM,EAAUxB,SAAH,EAAnB,EA5E+B,YA8ExBwB,EAAUvM,GAAH,EAAgBA,EAAQ+K,EAAtC,QA9E+B,iBAiF7B,OAFMkD,EAAQrB,WAAd,GACM6J,EAAY5R,SAAlB,GAhF6B,UAiFvB,CAACoJ,EAAP,GAjF6B,QAkF7BjO,EAAQuM,EAAUvM,EAAH,EAAeA,EAA9BA,EAlF6B,0DA0FjC0W,OA1FiC,SA0F3B,OACJ,IAAMvN,EAAI2C,YAAV,GAEA,MAAO,CADGc,SAAV,GACA,IAOF+J,WApGiC,SAoGvB,KACR,IAAMzJ,EAAON,SAAb,GAEA,GAAItB,YAAJ,GACE,MAAM,IAAIxN,MAAM,2CAAV,yEAAN,IAKF,UAOF,YApHiC,qBAoHjC,GApHiC,6FAsH/B0T,iCAKI,GA3H2B,cA6HJ5E,WAA3B,IA7H+B,qFA6HpB,EA7HoB,KA8H7B,KADF,EA7H+B,MA8HzB/H,OA9HyB,gBAiI3B,OAjI2B,SAiIrB,CAACqI,EAAP,GAjI2B,qMA4IjC,SA5IiC,qBA4IjC,GA5IiC,6FA8I/BsE,iCAKI,GAnJ2B,cAqJJ5E,WAA3B,IArJ+B,qFAqJpB,EArJoB,KAqJ/B,EArJ+B,MAsJzBgB,aAAJ,GAtJ6B,gBAuJ3B,OAvJ2B,SAuJrB,CAACV,EAAP,GAvJ2B,qMAgKjC0J,aAhKiC,SAgKrB,GACV,OAAIhJ,cAAJ,GACE,mBAIA,gBAUJqE,MAhLiC,SAgL5B,KAIH,IAHA,IAAM9I,EAAItE,EAAV,QACIyI,EAAIV,SAAR,GAEA,IACMT,cAAJ,IAAsBmB,mBAGpBA,EAAIA,WAAJA,GACAnE,UAIJ,MAAO,CAACmE,EAAR,IAOFN,SApMiC,SAoMzB,KACN,GAAIb,UAAJ,GACE,MAAM,IAAIrO,MAAM,yDAAV,OACqDwY,eAD3D,KAqCF,OA9BgB3N,GAAQ,CAAEoC,SAAUyL,EAAKzL,WAAY8L,YACnD,IADoD,EACpD,EAAqB5K,SAArB,sBAAM,EAAN,KAAM,EAAN,KACMwH,EAAc7G,GAAA,QAAc,CAChCL,SADgC,EAEhCmH,KAAM,6CAAezH,cAAf,MAJ4C,cAOpD,GAPoD,IAOpD,2BAAoC,KAApC,EAAoC,0BAClC,IAAKA,cAAL,GAAkC,CAChC,IAAM9F,EAASyG,YAAf,GACM5M,EAAQ6E,EAAKA,SAAnB,GACAsB,uBAGF,GAAI2F,YAAkBkG,EAAtB,MAAiC,CAC/B,IAAMiB,EAAOrG,UAAb,GACAqG,OAAYA,eAAmBjB,EAA/BiB,QAGF,GAAInH,YAAkBiH,EAAtB,MAAmC,CACjC,IAAME,EAAOrG,UAAb,GACAqG,OAAYA,aAAgBF,EAA5BE,UArBgD,8BAyBhD3H,YAAJ,KACEuL,qBAIJ,UAQFtW,IAnPiC,SAmP9B,KAGD,IAFA,IAAI2M,EAAJ,EAESrL,EAAT,EAAgBA,EAAIgD,EAApB,OAAiChD,IAAK,CACpC,IAAMsH,EAAItE,EAAV,GAEA,GAAIsH,eAAsBe,WAA1B,GACE,MAAM,IAAIpP,MAAM,qCAAV,+BACmDwY,eADzD,KAOFpJ,EAAOA,WAAPA,GAGF,UAOF9M,IA3QiC,SA2Q9B,KAGD,IAFA,IAAI8M,EAAJ,EAESrL,EAAT,EAAgBA,EAAIgD,EAApB,OAAiChD,IAAK,CACpC,IAAMsH,EAAItE,EAAV,GAEA,GAAIsH,eAAsBe,WAA1B,GACE,SAGFA,EAAOA,WAAPA,GAGF,UAOF4J,OA/RiC,SA+R3B,GACJ,OACE3K,cAAsByB,aAAtBzB,IAAkDb,YADpD,IASFyL,WAzSiC,SAySvB,GACR,IAAK9X,cAAL,GACE,SAEF,IAAM+X,EAAeZ,OAArB,GACA,YAAIY,EACF,SAEF,IAAMD,EAAa3Y,SAAY6S,YAAG,OAAIrE,UAAtC,MAEA,OADAwJ,YACA,GAOFpD,KA1TiC,SA0T7B,KAIF,IAHA,IAAM7J,EAAItE,EAAV,QACIyI,EAAIV,SAAR,GAEA,IACMT,cAAJ,IAAsBmB,mBADd,CAIN,IAAMzL,EAAIyL,kBAAV,EACAA,EAAIA,WAAJA,GACAnE,UAIJ,MAAO,CAACmE,EAAR,IAOF2F,KA/UiC,SA+U7B,KACF,IAAM/F,EAAON,SAAb,GAEA,IAAKT,UAAL,GACE,MAAM,IAAIrO,MAAM,qCAAV,4DAAN,IAKF,UAUF,OAlWiC,qBAkWjC,KAlWiC,2FAqW/B0T,iCAEI,GAvW2B,cAyWf1F,YAAhB,IAzW+B,yDA2W7B,OAFF,EAzW+B,QA0WvBwB,EAAIV,SAAV,GA1W6B,SA2WvB,CAACU,EAAP,GA3W6B,qMAmXjC8D,QAnXiC,SAmX1B,KACL,OACGxD,iBACCA,kBADDA,IAECA,aAFF,IAGCzB,cACCA,eADDA,IAECA,aANJ,IAgBF,MApYiC,qBAoYjC,GApYiC,2GAsY/BqF,iCAKI,GAEE,EAAN,EAAM,KA7YyB,EA6Y/B,EAAcjF,eA7YiB,WA8Y/B,EAAQrF,YA9YuB,MA8YzB,GA9YyB,EA8YZsM,EAAnB,EAAmBA,GACbyD,EAAU,IAAhB,IACI9N,EAAJ,GACImE,EAAJ,EAjZ+B,WAoZzBkG,KAAOjH,EAAUT,cAAH,GAA0BA,aAA5C,IApZ6B,sDAwZxBmL,MAAL,GAxZ6B,iBAyZ3B,OAzZ2B,UAyZrB,CAAC3J,EAAP,GAzZ2B,WA8Z1B2J,MAAD,IACC9K,UADD,QAEAmB,mBACCoG,UAJH,IAImBA,EAAK,CAACpG,EAANoG,IAjaU,wBAma3BuD,SACIC,EAAY3K,EAAUe,kBAAH,EAAvB,EAEIxB,gBAAJ,KACEoL,EAAYhQ,EAAKiC,EAAjB+N,SAGF/N,EAAIA,SAAJA,GACAmE,EAAIV,SAAJU,GA3a2B,kCAgb7B,IAAInE,SAhbyB,wDAqb7B,EArb6B,oBAsbrBuF,EAAU5C,QAAhB,IAEIc,SAAJ,GAxb2B,wBAybzBzD,IACAmE,EAAIV,SAAJU,GA1byB,mCAgczBf,GAAJ,IAAepD,EAAEA,SAAFA,GAhcc,wBAicrBuF,EAAU5C,YAAhB,GACA3C,IACAmE,EAAIV,SAAJU,GAnc2B,+BAwc7BnE,EAAI2C,UAAJ3C,GACAmE,EAAIV,SAAJU,GACA2J,SA1c6B,0DAkdjC9Q,OAldiC,SAkd3B,KACJ,IAAMiO,EAAatI,UAAnB,GACM3C,EAAIyD,SAAV,GAEA,GAAIT,UAAJ,GACE,MAAM,IAAIrO,MAAM,kCAAV,SAAN,6CAKF,UAWF4X,OAveiC,SAue3B,GACJ,OAAIvJ,UAAJ,GACSe,EAAP,KAEOA,eAAkBN,GAAlBM,aAAP,KAQJ,MAnfiC,qBAmfjC,GAnfiC,6FAqf/BsE,iCAKI,GA1f2B,cA4fJ5E,WAA3B,IA5f+B,qFA4fpB,EA5foB,KA4f/B,EA5f+B,MA6fzBT,UAAJ,GA7f6B,gBA8f3B,OA9f2B,SA8frB,CAACe,EAAP,GA9f2B,sM,wkBC0DtBsF,GAAgC,CAK3C2E,gBAL2C,SAK5B,GACb,OAAO3E,mBAAgCpU,gBAAvC,UAOFgZ,YAb2C,SAahC,GACT,IAAKtG,YAAL,GACE,SAGF,OAAQ1S,EAAR,MACE,kBACE,OAAO0N,UAAY1N,EAAZ0N,OAA2Bc,UAAYxO,EAA9C,MACF,kBACE,MACE,kBAAOA,EAAP,0BACOA,EAAP,MACA0N,UAAY1N,EAHd,MAKF,iBACE,MACE,kBAAOA,EAAP,UACA0N,UAAY1N,EADZ,OAEA0S,YAAc1S,EAHhB,YAKF,gBACE,OAAO0N,UAAY1N,EAAZ0N,OAA2BA,UAAY1N,EAA9C,SACF,kBACE,OAAO0N,UAAY1N,EAAZ0N,OAA2Bc,UAAYxO,EAA9C,MACF,kBACE,MACE,kBAAOA,EAAP,0BACOA,EAAP,MACA0N,UAAY1N,EAHd,MAKF,eACE,OACE0N,UAAY1N,EAAZ0N,OACAgF,YAAc1S,EADd0N,aAEAgF,YAAc1S,EAHhB,eAKF,oBACE,OACGA,qBAA6B6N,WAAc7N,EAA5C,gBACCA,wBAAgC6N,WAAc7N,EAD/C,aAEC0S,YAAc1S,EAAd0S,aACCA,YAAc1S,EAJlB,eAMF,iBACE,OACE0N,UAAY1N,EAAZ0N,yBACO1N,EAAP,UACA0S,YAAc1S,EAHhB,YAKF,QACE,WAQNiZ,gBAvE2C,SAuE5B,GACb,OACEpY,kBAAwBb,SAAY6S,YAAG,OAAIuB,eAD7C,OASF8E,qBAjF2C,SAiFvB,GAClB,OAAO9E,mBAAgCpU,gBAAvC,eAOFmZ,gBAzF2C,SAyF5B,GACb,OAAO/E,mBAAgCpU,gBAAvC,UAQFoZ,QAlG2C,SAkGpC,GACL,OAAQtN,EAAR,MACE,kBACE,uBAAgBuN,KAAM,gBAGxB,kBACE,uBAAgBA,KAAM,gBAGxB,iBACE,uBAAgBA,KAAhB,aAAoC5S,KAAMiH,YAAc5B,EAAd4B,QAG5C,gBACE,IAAM,EADU,EACV,QAAWjH,EADD,EACCA,KAGjB,GAAIiH,YAAJ,GACE,SAKF,GAAIA,eAAJ,GACE,uBAAgBjH,KAAhB,EAA+B6J,QAAS7J,IAS1C,IAAM6S,EAAc5L,eAApB,GACM6L,EAAiB7L,aAAeA,QAAfA,GAAvB,GACA,uBAAgBjH,KAAhB,EAAmC6J,QAASiJ,IAG9C,kBACE,uBAAgBF,KAAM,gBAGxB,kBACE,uBAAgBA,KAAM,gBAGxB,eACE,IAAM,EAAN,EAAM,WAAcG,EAApB,EAAoBA,cACpB,uBAAgBC,WAAhB,EAA2CD,cAAeC,IAG5D,oBACE,IAAM,EAAN,EAAQA,WAAYD,EAApB,EAAoBA,cAEpB,OACE,eADF,MAAIC,EACF,CAEEA,WAFF,EAGED,cAAe,MAEZ,MAAIA,EACT,CAEEC,WAFF,KAGED,cAAeC,GAGjB,CAAgBA,WAAhB,EAA2CD,cAAeC,IAI9D,iBACE,uBAAgBJ,KAAhB,aAAoC5S,KAAMiH,QAAU5B,EAAV4B,WCjRrCA,GAAsB,CAQjC0C,UARiC,SAQxB,G,IAAagD,yDAAiC,GACrD,IAAQjF,eAAR,SACIuL,EAAQhM,YAAZ,GAQA,OALEgM,EADF,EACUA,QAARA,GAEQA,WAARA,IAUJpB,OAzBiC,SAyB3B,KAGJ,IAFA,IAAMA,EAAN,GAES7U,EAAT,EAAgBA,EAAIgD,EAAJhD,QAAmBA,EAAIkW,EAAvC,OAAuDlW,IAAK,CAC1D,IAAMmW,EAAKnT,EAAX,GAGA,GAAImT,IAFOD,EAAX,GAGE,MAGFrB,UAGF,UAYFuB,QAnDiC,SAmD1B,KAGL,IAFA,IAAMC,EAAMC,SAAStT,EAATsT,OAAsBJ,EAAlC,QAESlW,EAAT,EAAgBA,EAAhB,EAAyBA,IAAK,CAC5B,GAAIgD,KAAUkT,EAAdlW,GAA0B,SAC1B,GAAIgD,KAAUkT,EAAdlW,GAA0B,OAAO,EAGnC,UAOFuW,UAlEiC,SAkExB,KACP,IAAMvW,EAAIgD,SAAV,EACMwT,EAAKxT,UAAX,GACMyT,EAAKP,UAAX,GACMC,EAAKnT,EAAX,GACM0T,EAAKR,EAAX,GACA,OAAOjM,gBAAuBkM,EAA9B,GAOFQ,OA/EiC,SA+E3B,KACJ,IAAM3W,EAAIgD,EAAV,OACMwT,EAAKxT,UAAX,GACMyT,EAAKP,UAAX,GACA,OAAOjM,YAAP,IAOF2M,WA1FiC,SA0FvB,KACR,IAAM5W,EAAIgD,SAAV,EACMwT,EAAKxT,UAAX,GACMyT,EAAKP,UAAX,GACMC,EAAKnT,EAAX,GACM0T,EAAKR,EAAX,GACA,OAAOjM,gBAAuBkM,EAA9B,GAOFU,OAvGiC,SAuG3B,KACJ,OACE7T,WAAgBkT,EAAhBlT,QAAkCA,SAAW,qBAAUyI,IAAMyK,EAD/D,OASFY,YAjHiC,SAiHtB,GACT,OAAO9T,EAAKA,SAALA,GAAP,GAOF+T,QAzHiC,SAyH1B,KACL,WAAO9M,iBAOT+E,WAjIiC,SAiIvB,KACR,OAAOhM,SAAckT,EAAdlT,QAAP,IAAuCiH,iBAOzC+M,SAzIiC,SAyIzB,KACN,WAAO/M,iBAOTgN,QAjJiC,SAiJ1B,KACL,OACEjU,WAAgBkT,SAAhBlT,GADF,IACwCiH,iBAQ1CiN,SA3JiC,SA2JzB,KACN,OAAOlU,UAAekT,EAAflT,QAAP,IAAwCiH,iBAO1CkN,aAnKiC,SAmKrB,KACV,OAAOnU,SAAckT,EAAdlT,QAAP,IAAuCiH,iBAOzCmN,SA3KiC,SA2KzB,KACN,OACEpU,aAAoBkT,EAApBlT,QADF,IACwCiH,iBAQ1CoN,OArLiC,SAqL3B,GACJ,OACEja,mBACCb,cAFH,kBAEgCA,EAAP,KAQ3B+a,UAhMiC,SAgMxB,KACP,GAAItU,WAAgBkT,EAApB,OACE,SAGF,IAAMM,EAAKxT,WAAX,GACMyT,EAAKP,WAAX,GAGA,OAFWlT,EAAKA,SAAhB,KACWkT,EAAQA,SAAnB,IACoBjM,YAApB,IAWFwC,OApNiC,SAoN3B,GASJ,I,IAPAkD,yDAEI,GAEJ,IAAQjF,eAAR,SACM6M,EAAN,GAESvX,EAAT,EAAgBA,GAAKgD,EAArB,OAAkChD,IAChCuX,OAAUvU,UAAVuU,IAOF,OAJA,GACEA,YAGF,GAOF3I,KA5OiC,SA4O7B,GACF,OAAI5L,SACF,MAAM,IAAI/G,MAAM,4CAAV,SAAN,qCAKF,IAAMkV,EAAOnO,EAAKA,SAAlB,GACA,OAAOA,qBAAyBmO,EAAhC,IAOF7M,OA3PiC,SA2P3B,GACJ,OAAItB,SACF,MAAM,IAAI/G,MAAM,gDAAV,SAAN,OAGF,OAAO+G,WAAP,IAOFyQ,SAvQiC,SAuQzB,GACN,OAAIzQ,SACF,MAAM,IAAI/G,MAAM,gDAAV,SAAN,yCAKF,IAAMkV,EAAOnO,EAAKA,SAAlB,GAEA,GAAImO,GAAJ,EACE,MAAM,IAAIlV,MAAM,uDAAV,SAAN,mDAKF,OAAO+G,qBAAyBmO,EAAhC,IAOFqG,SA7RiC,SA6RzB,KACN,IAAKvN,gBAAD,KAAqCA,YAAzC,GACE,MAAM,IAAIhO,MAAM,oCAAV,yCAAN,qDAKF,OAAO+G,QAAWwR,EAAlB,SAOFiD,UA3SiC,SA2SxB,K,IAGP9H,yDAAwD,GAExD,OAAO7I,GAAQ9D,GAAMsE,YACnB,QAAQqL,gBAAR,MAAmB,UAAnB,EAGA,OAAI3P,SAIJ,OAAQ0U,EAAR,MACE,kBACE,IAAcrP,EAAd,EAAQrF,MAGNiH,gBACAA,gBADAA,IAEAA,gBAHF,MAKE3C,EAAEe,SAAFf,OAGF,MAGF,kBACE,IAAce,EAAd,EAAQrF,KAER,GAAIiH,gBAAsBA,gBAA1B,GACE,YACSA,gBAAJ,KACL3C,EAAEe,SAAFf,OAGF,MAGF,iBACE,IAAM,EAAN,EAAQtE,KAAU2U,EAAlB,EAAkBA,SAEd1N,gBAAsBA,gBAA1B,GACE3C,EAAEe,SAAFf,MACS2C,gBAAJ,KACL3C,EAAEe,SAAFf,MACAA,EAAEe,EAAFf,YAGF,MAGF,iBACE,IAAM,EAAN,EAAQtE,KAAU2U,EAAlB,EAAkBA,SAElB,GAAI1N,YAAJ,IACE,eAAI0I,EACFrL,EAAEA,SAAFA,WACK,gBAAIqL,EAGT,iBAEO1I,gBAAJ,GACL3C,EAAEe,SAAFf,MACS2C,oBAA0BjH,EAAKqF,EAALrF,SAA9B,IACLsE,EAAEe,SAAFf,MACAA,EAAEe,EAAFf,YAGF,MAGF,gBACE,IAAM,EADU,EACRtE,KAAmB4U,EADX,EACE/K,QAGlB,GAAI5C,YAAJ,GACE,OAGF,GAAIA,oBAA0BA,YAA9B,GAAkD,CAChD,IAAMjC,EAAO4P,EAAb,QAMA,OAJI3N,oBAA4B5B,SAAYuP,EAA5C,SACE5P,EAAKK,SAALL,OAGKA,SAAYV,QAAQe,EAA3B,SAEA4B,oBACCA,oBAA2BA,YAFvB,IAIDA,gBAAJ,GACE3C,EAAEe,SAAFf,MAEAA,EAAEe,SAAFf,MAGF2C,oBACAA,YADAA,IAEAA,gBAHK,IAKDA,gBAAJ,KACE3C,EAAEe,SAAFf,OAGFA,EAAEsQ,SAAFtQ,OACS2C,gBAAJ,KACDA,YAAJ,KACE3C,EAAEsQ,SAAFtQ,OAGFA,EAAEe,SAAFf,aCzbCoC,GAA4B,CAKvC+N,UALuC,SAK9B,KACP,IAAM,EAAN,EAAM,QAAW9E,EAAjB,EAAiBA,SAEjB,SAAI7M,EAAJ,CAIA,IAAM9C,EAAOiH,GAAA,cAA4B,CAAE0I,aAC3CC,YAEA,MAAI5P,GACF4P,a,wkBCHO/B,GAAwB,CAMnCuF,QANmC,SAM5B,KACL,IAAM/T,EAAS4H,WAAa0B,EAAb1B,KAAyBiM,EAAxC,MAEA,WAAI7T,EACEsJ,SAAeuK,EAAnB,QAAmC,EAC/BvK,SAAeuK,EAAnB,OAA0C,EAC1C,EAGF,GAOFa,QAtBmC,SAsB5B,KACL,WAAOlG,iBAOTmG,SA9BmC,SA8B3B,KACN,WAAOnG,iBAOTgG,OAtCmC,SAsC7B,KAEJ,OACElL,WAAiBuK,EAAjBvK,QAAmC1B,UAAY0B,EAAZ1B,KAAwBiM,EAD7D,OASF2B,QAjDmC,SAiD5B,GACL,OACE5I,kCACO1S,EAAP,QACA0N,UAAY1N,EAHd,OAWFkb,UA7DmC,SA6D1B,K,IAGP9H,yDAAwD,GAExD,OAAO7I,GAAQ6E,GAAOrE,YACpB,QAAQqL,gBAAR,MAAmB,UAAnB,EACM,EAAN,EAAM,KAAQ5E,EAAd,EAAcA,OAEd,OAAQ1F,EAAR,MACE,kBACA,gBACEf,OAAS2C,iBAAT3C,GACA,MAGF,kBACM2C,UAAY5B,EAAZ4B,SAA8B5B,UAAlC,IACEf,UAAYe,OAAZf,QAGF,MAGF,iBACM2C,UAAY5B,EAAZ4B,KAAJ,KACE3C,UAAYe,EAAZf,UAGFA,OAAS2C,iBAAT3C,GACA,MAGF,kBACM2C,UAAY5B,EAAZ4B,SAA8B5B,UAAlC,IACEf,UAAYgP,SAASvI,EAAS1F,EAAlBiO,OAA6BjO,OAAzCf,SAGF,MAGF,kBACE,GAAI2C,UAAY5B,EAAZ4B,SAA8BA,cAAgB5B,EAAhB4B,KAAlC,GACE,YAGF3C,OAAS2C,iBAAT3C,GACA,MAGF,iBACE,GAAI2C,UAAY5B,EAAZ4B,KAAJ,GAAgC,CAC9B,GAAI5B,gBAAJ,MAA8BsK,EAC5B,aAEAtK,cACCA,gBAFI,YAEsBsK,KAE3BrL,UAAYe,EAAZf,SAEAA,OAAS2C,GAAA,8BAEP0I,SAAU,mBAIdrL,OAAS2C,iBAAT3C,SC5ICqC,GAA8B,CAKzC8N,UALyC,SAKhC,KACP,IAAM,EAAN,EAAM,QAAW9E,EAAjB,EAAiBA,SAEjB,SAAI7M,EAAJ,CAIA,IAAM6F,EAAQkF,GAAA,cAA6B,CAAE8B,aAC7CC,YAEA,MAAIjH,GACFiH,a,mOCUOxI,GAAwB,CAMnC8F,MANmC,SAM9B,G,IAEHP,yDAEI,GAEJ,IAAQjF,eAAR,SACM,EAAN,EAAM,OAAUmB,EAAhB,EAAgBA,MAChB,OAAOzB,qBACH,CAACwB,EADExB,GAEH,CAACyB,EAFL,IASFsE,IAvBmC,SAuBhC,GACD,MAAgB/F,SAAhB,GAAM,EAAN,oBACA,UAOFyM,OAhCmC,SAgC7B,KACJ,OACEhG,UAAaf,EAAbe,OAA2BqF,EAA3BrF,SACAA,UAAaf,EAAbe,MAA0BqF,EAF5B,QAUF4B,SA3CmC,SA2C3B,KACN,GAAI1N,WAAJ,GAA2B,CACzB,GACEA,cAAsBjL,EAAtBiL,SACAA,cAAsBjL,EAFxB,OAIE,SAGF,MAAiBiL,SAAjB,sBAAM,EAAN,KAAM,EAAN,KACA,EAAiBA,SAAjB,sBAAM,EAAN,KAAM,EAAN,KACA,OAAOyG,kBAA0BA,aAAjC,GAGF,MAAqBzG,SAArB,sBAAM,EAAN,KAAM,EAAN,KACI2N,GAAJ,EACIC,GAAJ,EAUA,OARInH,WAAJ,IACEkH,EAAelH,iBAAfkH,EACAC,EAAcnH,iBAAdmH,IAEAD,EAAe9N,aAAqBiH,EAArBjH,OAAf8N,EACAC,EAAc/N,aAAqBkG,EAArBlG,OAAd+N,GAGKD,GAAP,GAOFE,aA5EmC,SA4EvB,KACV,IAA0BvJ,EAA1B,yBACA,EAAiBtE,SAAjB,sBAAM,EAAN,KAAM,EAAN,KACA,EAAiBA,SAAjB,sBAAM,EAAN,KAAM,EAAN,KACM8G,EAAQL,mBAAd,EACMV,EAAMU,mBAAZ,EAEA,OAAIA,cAAJ,GACE,K,kWAEA,EAASjF,OAAT,EAAwBC,MAAOsE,GAA/B,IASJ+H,WA/FmC,SA+FzB,GACR,IAAM,EAAN,EAAM,OAAUrM,EAAhB,EAAgBA,MAChB,OAAOgF,aAAP,IAQFsH,YAzGmC,SAyGxB,GACT,IAAM,EAAN,EAAM,OAAUtM,EAAhB,EAAgBA,MAChB,OAAOgF,YAAP,IASFuH,WApHmC,SAoHzB,GACR,OAAQhO,eAAR,IASFiO,UA9HmC,SA8H1B,GACP,OAAQjO,cAAR,IAOFkO,QAtImC,SAsI5B,GACL,OACErJ,gBACA4B,WAActU,EADd0S,SAEA4B,WAActU,EAHhB,QAWF,OAlJmC,qBAkJnC,GAlJmC,iEAmJjC,OAnJiC,SAmJ3B,CAACuT,EAAD,OAAN,UAnJiC,OAoJjC,OApJiC,SAoJ3B,CAACA,EAAD,MAAN,SApJiC,0CA2JnCoB,MA3JmC,SA2J9B,GACH,MAAgB9G,SAAhB,GAAM,EAAN,oBACA,UAOFqN,UApKmC,SAoK1B,K,IAQP,EACA,EANA9H,yDAEI,GAEJ,IAAQgD,gBAAR,MAAmB,SAAnB,EAyBA,MArBA,WAAIA,EACEvI,aAAJ,IACEmO,YACAC,eAEAD,aACAC,aAEG,YAAI7F,EACLvI,aAAJ,IACEmO,aACAC,cAEAD,YACAC,eAGFD,IACAC,KAGK1R,GAAQgJ,GAAOkF,YACpB,IAAMpJ,EAASiF,GAAA,UAAgBmE,EAAhB,SAA8B,CAAErC,SAAU4F,IACnD1M,EAAQgF,GAAA,UAAgBmE,EAAhB,QAA6B,CAAErC,SAAU6F,IAEvD,IAAK5M,IAAL,EACE,YAGFoJ,WACAA,eCvOOpL,GAA8B,CAKzC6N,UALyC,SAKhC,KACP,IAAM,EAAN,EAAM,QAAW9E,EAAjB,EAAiBA,SAEjB,SAAI7M,EAAJ,CAIA,IAAM9C,EAAOoH,GAAA,cAA6B,CAAEuI,aAC5CC,YAEA,MAAI5P,GACF4P,a,wkBCROtI,GAAsB,CAKjCuM,OALiC,SAK3B,K,IAGJlH,yDAA+B,GAE/B,IAAQpD,aAAR,SAEA,cAGE,OAFA,eAKF,OAAOkM,KACLlM,EAAQmM,EAAH,GADO,EAEZnM,EAAQmM,EAAH,GAFP,IAUFrH,OA5BiC,SA4B3B,GACJ,OAAOpC,gBAAP,kBAAsC1S,EAAP,MAOjCoc,WApCiC,SAoCvB,GACR,OAAOvb,kBAAwBb,SAAY6S,YAAG,OAAI9E,UAAlD,OAOFsO,YA5CiC,SA4CtB,GACT,gBAAQtJ,QAUVC,QAvDiC,SAuD1B,KACL,IAAK,IAAL,OACE,YAAItR,KAICsN,iBAAD,IAA6BA,OAAc+D,EAA/C,IACE,SAIJ,UAOFuJ,YAzEiC,SAyEtB,KACT,IADS,EACLC,EAAiB,CAAC,GAAD,GAArB,IADS,cAGT,GAHS,IAGT,2BAA+B,OAA/B,EAA+B,QACHpK,EAA1B,yBACA,EAAqBtE,SAArB,sBAAM,EAAN,KAAM,EAAN,KACMwE,EAAN,GACImK,EAAJ,EAJ6B,cAM7B,GAN6B,IAM7B,2BAA2B,KAA3B,EAA2B,QACjB7c,EAAWkV,EAAnB,KAAQlV,OACF6R,EAAN,EAIA,GAHAgL,GAHyB,EAMrB7H,aAA0Bf,UAA9B,EACExT,mBACAiS,eAKF,GACGsC,WAAiBf,EAAjBe,SACEA,cAAsBf,WADzB,IAEAe,SAFA,GAGAf,SAHA,GAICA,cALH,IAK4BpC,EAE1Ba,cAPF,CAcA,IAAIoK,EAAJ,EACI/I,OAAM,EACNL,OAAK,EAET,GAAIO,SAAJ,EAAoB,CAClB,IAAM8I,EAAM9I,SAAZ,EACAP,EAAQ,GAAH,aAAgBrE,KAAMyN,kBAC3BA,EAAS,GAAH,aAAgBzN,KAAMyN,oBAG9B,GAAI9H,SAAJ,EAA2B,CACzB,IAAM+H,EAAM/H,SAAZ,EACAjB,EAAS,GAAH,aAAgB1E,KAAMyN,oBAC5BA,EAAS,GAAH,aAAgBzN,KAAMyN,kBAG9Brc,mBAEA,GACEiS,UAGFA,UAEA,GACEA,YA1DyB,8BA8D7BkK,KAjEO,8BAoET,W,woCC3CG,IAAMI,GAAiC,CAK5CC,YAL4C,SAKjC,K,IAGTxJ,yDAOI,GAEJlG,yBAAkC,WAChC,QAAQ2P,eAAR,aAAyBnN,aAAzB,aAAwCP,YAAxC,MAA+C,SAA/C,EACI,EAAJ,EAAI,KAAJ,EAAI,MAAa2N,EAAjB,EAAiBA,OAMjB,GAJItO,UAAJ,KACEuO,EAAQ,CAARA,IAGF,IAAIA,SAAJ,CAIA,QAAM,EAAN,oBAqBA,GAhBA,IAEItN,EADE/C,EAAJ,UACOA,EAAL+C,UACS/C,kBAAJ,EACAQ,SAALuC,IAEK,CAALA,GAGFqN,MAGF,MAAIA,IACFA,MAGEjP,WAAJ,GAKE,GAJA,IACE4B,EAAKvC,iBAALuC,IAGE5B,eAAJ,GACE4B,EAAKA,EAALA,WACK,CACL,MAAgB5B,SAAhB,GAAM,EAAN,oBACM4I,EAAWvJ,cAAjB,GACAS,YAA0B,CAAE8B,OAC5BA,EAAKgH,EAALhH,QAIJ,GAAI6E,WAAJ,GAAuB,CACrB,MAAIxG,IAEAA,EADEC,UAAJ,GACUmB,YAAC,OAAInB,UAAbD,IACSpB,WAAJ,GACGwC,YAAC,OAAInB,cAAkBb,cAA/BY,IAEQoB,YAAC,OAAIhC,aAAbY,KAIJ,MAAgBZ,GAAA,QAAqB,CACnCuC,GAAIA,EAD+B,KAEnC3B,QACAqB,OACAO,UAJI,EAAN,oBAOA,MAQE,OAPA,IAAM,EAAN,oBACMyG,EAAUjJ,aAAhB,GACM8P,EAAU9P,aAAhB,GACAS,gBAA8B,CAAE8B,KAAI3B,QAAOqB,OAAMO,UACjD,IAAMjJ,EAAO0P,EAAb,QACA1G,EAAKuN,EAAUtP,QAAH,GAAZ+B,EAMJ,IAAMuG,EAAatI,UAAnB,GACI9L,EAAQ6N,EAAGA,SAAf,GAEA,GAAKC,IAASxC,GAAA,OAAoB,CAAEuC,GAAIuG,IAAxC,CAjFgC,oBAqFhC,GArFgC,IAqFhC,2BAA0B,KAA1B,EAA0B,QAClBvP,EAAOuP,SAAb,GACApU,IACA8K,QAAa,CAAE2M,KAAF,cAAuB5S,KAAvB,EAA6BqI,UAxFZ,8BA2FhC,KAAY,CACV,IAAMM,EAAQlC,SAAd,GAEA,GACES,sBAWRsP,UA3H4C,SA2HnC,G,IAEP7J,yDAKI,GAEJlG,yBAAkC,WAChC,QAAQuC,UAAR,MAAa/C,EAAP,UAAN,MAA+ByC,YAA/B,MAAM,SAAN,MAAgDO,aAAhD,SACM5B,EAAN,EAAMA,MAQN,GANA,MAAIA,IACFA,EAAQJ,aACJwP,GAAUxQ,EADNgB,GAEJwB,YAAC,OAAIhC,aAFTY,KAKF,EAOA,IAHA,IAAMkF,EAAU9F,GAAA,QAAqB,CAAEuC,KAAI3B,QAAOqB,OAAMO,UAGxD,MAFiB7O,MAAA,QAAoB,6CAAWqM,aAAX,MAErC,eAAgC,CAA3B,IACGzG,EADR,KACE,QAEA,GAAIA,SAAJ,EACE,MAAM,IAAI/G,MAAM,+BAAV,SAAN,+CAKF,IAAMyd,EAAkBjQ,UAAoBQ,UAA5C,IACA,mBAAM,EAAN,KAAM,EAAN,KACM9L,EAAQ6E,EAAKA,SAAnB,GACQ9G,EAAWoI,EAAnB,SAAQpI,OAER,OAAIA,EAAc,CAChB,IAAMyd,EAAS1P,QAAf,GACAC,eAA6B,CAAE8B,GAAF,EAAY2F,GAAZ,EAAwB1F,UACrD/B,iBAA+B,CAAE8B,GAAF,EAAkBC,eAC5C,OAAI9N,EACT+L,eAA6B,CAAE8B,GAAF,EAAY2F,GAAZ,EAA4B1F,eACpD,GAAI9N,IAAUjC,EAAd,EAA0B,CAC/B,IAAMyd,EAAS1P,QAAf,GACAC,eAA6B,CAAE8B,GAAF,EAAY2F,GAAZ,EAAwB1F,cAChD,CACL,IAAM2N,EAAY3P,QAAlB,GACM0P,EAAS1P,QAAf,GACAC,gBAA8B,CAAE8B,GAAF,EAAiBC,UAC/C/B,eAA6B,CAAE8B,GAAF,EAAY2F,GAAZ,EAAwB1F,gBAW7D4N,WA3L4C,SA2LlC,G,IAERlK,yDAMI,GAEJlG,yBAAkC,WAChC,IAAI,EAAJ,EAAI,MAAJ,IAAauC,UAAb,MAAkB/C,EAAOG,UAAzB,EACA,IAAQgQ,eAAR,aAAyBnN,aAAzB,aAAwCP,YAAxC,MAA+C,SAA/C,EAEA,MAIA,SAAIrB,EACF,GAAIJ,UAAJ,GAAqB,CACnB,MAAiBR,YAAjB,GAAM,EAAN,oBACAY,EAAQoB,YAAC,OAAInH,oBAAb+F,SAEAA,EAAQoB,YAAC,OAAIhC,aAAbY,IAQJ,IAJK+O,GAAWhP,WAAhB,KACE4B,EAAKvC,iBAALuC,IAGE5B,WAAJ,GACE,GAAIA,eAAJ,GACE4B,EAAKA,EAALA,WACK,CACL,MAAgB5B,SAAhB,GAAM,EAAN,oBACM4I,EAAWvJ,cAAjB,GACAS,YAA0B,CAAE8B,OAC5BA,EAAKgH,EAALhH,QAEA,MAAI2D,MACFzF,eAKN,MAAkBT,GAAA,QAAqB,CAAEuC,KAAI3B,QAAO4B,QAAOP,SAArD,EAAN,oBACMW,EAAO5C,GAAA,WAAwB,CAAEuC,KAAI3B,QAAO4B,QAAOP,SAEzD,GAAK5F,GAAL,GAIA,uBAAM,EAAN,KAAM,EAAN,KACA,mBAAM,EAAN,KAAM,EAAN,KAEA,GAAI9C,cAAJ,IAAyB8W,SAAzB,CAIA,IAgBA,EACA,EAjBMjN,EAAU5C,QAAhB,GACM8P,EAAa9P,YAAnB,GACM+P,EAAoB/P,eAA1B,GACMwC,EAASrP,MAAA,KAAWqM,GAAA,SAAsB,CAAEuC,GAAIhJ,KAAS,0CAAhD,MACN+W,EADM,iBAAf,GAMME,EAAgBxQ,GAAA,QAAqB,CACzCuC,GADyC,EAEzCN,KAFyC,UAGzCrB,MAAOoB,YAAC,OAAIgB,eAAsByN,GAAmBjR,EAAQwC,MAGzD0O,EAAWF,GAAiBxQ,aAAuBwQ,EAAzD,IAMA,GAAI3P,cAAqBA,UAAzB,GAAgD,CAC9C,IAAiBoE,EAAjB,eACAiJ,EAAWyC,OAAXzC,OACA3B,QACK,KAAIjK,kBAA2BA,aAA/B,GAKL,MAAM,IAAI9P,MAAM,kCAAV,iFACkGwY,eADlG,eAGCA,eAHP,KAJqB/F,EAArB,mBACAiJ,EAAWyC,WAAXzC,OACA3B,IAWF,GACE9L,eAA6B,CAAE8B,GAAF,EAAY2F,GAAZ,EAAyB1F,UAKxD,GACE/B,iBAA+B,CAAE8B,GAAImO,EAAN,QAAyBlO,UAQvDF,iBAA+BtC,aAAhC,IACCa,cAFH,KAE4B8P,OAE1BlQ,iBAA+B,CAAE8B,GAAF,EAAgBC,UAE/ChD,QAAa,CACX2M,KADW,aAEX5S,KAFW,EAGX2U,WACA3B,eAIJ,GACEmE,iBASNE,UApU4C,SAoUnC,KAUP5Q,yBAAkC,WAChC,IAAM,EAAN,EAAM,GAAN,IAEEuC,UAFF,MAEO/C,EAFD,UAAN,MAGEyC,YAHF,MAAM,SAAN,MAIEO,aAJF,SAMM5B,EAAN,EAAMA,MAEN,MAIA,MAAIA,IACFA,EAAQJ,aACJwP,GAAUxQ,EADNgB,GAEJwB,YAAC,OAAIhC,aAFTY,KASF,IAJA,IAAMiQ,EAAQ7Q,aAAd,GACM8Q,EAAU9Q,GAAA,QAAqB,CAAEuC,KAAI3B,QAAOqB,OAAMO,UAGxD,MAFiB7O,MAAA,QAAoB,6CAAWqM,aAAX,MAErC,eAAgC,CAA3B,IACGzG,EADR,KACE,QACM6J,EAAUyN,EAAhB,QAEA,IAAItX,UACFiG,QAAa,CAAE2M,KAAF,YAAqB5S,OAAM6J,YAIxCyN,WACArQ,eADAqQ,IAEArQ,aAHF,KAQEqQ,UAAgBrQ,QAAUqQ,EAA1BA,UAIJA,eAQJE,YAjY4C,SAiYjC,G,IAET7K,yDAMI,GAEJlG,yBAAkC,WAChC,QAAQ2P,eAAR,aAAyBnN,aAAzB,aAAwCP,YAAxC,MAA+C,SAA/C,EACA,IAAMM,UAAN,MAAW/C,EAAP,UAAJ,EAA6BoB,EAA7B,EAA6BA,MAE7B,MAIA,MAAIA,IACFA,EAAQJ,aACJwP,GAAUxQ,EADNgB,GAEJwB,YAAC,OAAIhC,aAFTY,MAKG+O,GAAWhP,WAAhB,KACE4B,EAAKvC,iBAALuC,IAMF,IAHA,IAAMyO,EAAShR,GAAA,QAAqB,CAAEuC,KAAI3B,QAAOqB,OAAMO,UAGvD,MAFiB7O,MAAA,QAAmB,6CAAWqM,aAAX,MAEpC,eAAgC,CAA3B,IACGzG,EADR,KACE,QAEA,KAAU,CACR,MAAeyG,UAAf,GAAM,EAAN,oBACAR,QAAa,CAAE2M,KAAF,cAAuB5S,OAAMqI,gBAUlDqP,SA/a4C,SA+apC,K,IAGN/K,yDAOI,GAEJlG,yBAAkC,WAChC,IAAI,EAAJ,EAAI,MAAJ,IAAauC,UAAb,MAAkB/C,EAAOG,UAAzB,EACA,IACEgQ,eADF,aAEE1N,YAFF,MAAM,SAAN,MAGEnB,aAHF,aAIE0B,aAJF,SAOA,MAcA,GAVA,MAAI5B,IACFA,EAAQJ,aACJwP,GAAUxQ,EADNgB,GAEJwB,YAAC,OAAIhC,aAFTY,MAKG+O,GAAWhP,WAAhB,KACE4B,EAAKvC,iBAALuC,IAGEzB,GAASH,WAAb,GAAgC,CAC9B,IAAMuJ,EAAWlK,GAAA,aAA4B,CAAEkJ,SAAU,WACzD,EAAqBvI,SAArB,sBAAM,EAAN,KAAM,EAAN,KACMuQ,EAAYjP,sBAAlB,UACMkP,EAAiBnR,aAA0B0G,EAAjD,MACAjG,gBAA8B,CAC5B8B,GAD4B,EAE5B3B,QACAqB,KAH4B,EAI5BO,QACAhB,QAAS2P,IAEX,IAAMC,EAAqBpR,eAA8ByH,EAAzD,MACAhH,gBAA8B,CAC5B8B,GAD4B,EAE5B3B,QACAqB,KAH4B,EAI5BO,QACAhB,QAAS4P,IAEX7O,EAAK2H,EAAL3H,QAEA,MAAI2D,MACFzF,eA9C4B,oBAkDLT,GAAA,QAAqB,CAC9CuC,KACA3B,QACAqB,OACAO,WAtD8B,IAkDhC,2BAKI,8BALO,EAKP,KALJ,EAKI,KACI+J,EAAN,GACMD,EAFJ,GAKF,OAAI/S,SAAJ,CAIA,IAAK,IAAL,OACM8X,gBAAJ,SAAwBA,GAIpBxL,OAAajE,EAAjB,KAEMA,iBAAJ,KAA4B2K,KAAgB3K,EAAhB2K,IAC5BD,KAAmBzG,EAAnByG,IAIJ,IAAIpZ,uBACFsM,QAAa,CACX2M,KADW,WAEX5S,OACAgT,aACAD,oBAjF0B,oCA4FpCgF,WAvhB4C,SAuhBlC,G,IAERpL,yDAOI,GAEJlG,yBAAkC,WAChC,QAAQiC,YAAR,MAAM,SAAN,MAAyBO,aAAzB,SACI,EAAJ,EAAI,MAAJ,IAAaD,UAAb,MAAkB/C,EAAd,UAAJ,MAAoC+R,cAApC,MAAI,EAAJ,MAAgD/P,cAAhD,SAYA,GAVA,MAAIZ,IACFA,EAAQoB,YAAC,OAAIhC,aAAbY,KAGED,WAAJ,KACE4B,EAAKiP,GAAYhS,EAAjB+C,IAKE/B,UAAJ,GAAqB,CACnB,IAAMjH,EAAN,EACM2I,EAAQlC,WAAd,GACA,EAAiBA,YAAjB,GAAM,EAAN,oBACAY,EAAQoB,YAAC,OAAIA,IAAbpB,GACA2Q,EAASrP,cAAoB3I,EAApB2I,OAATqP,EACAhP,IACAf,KAGF,MAIA,IAAMiQ,EAAYzR,GAAA,aAA4B,CAC5CkJ,SAAU,aAEZ,EAAkBlJ,GAAA,QAAqB,CAAEuC,KAAI3B,QAAOqB,OAAMO,UAApD,EAAN,oBAEA,MAIA,IAAMkP,EAAY1R,GAAA,OAAoB,CAAEuC,KAAIN,KAAM,YAGlD,IAAKO,GAAL,EAAyB,CACvB,uBAAM,EAAN,KAAM,EAAN,KAEA,GAAIF,iBAA+B9C,WAAnC,GAA8D,CAC5D,IAAI2G,EAAQnG,WAAZ,GAEA,MAAY,CACV,IACM2R,EAAYnR,QAAlB,GACAC,iBAFa,CAAEqB,KAAM,IAEgB,CAAES,GAAF,EAAiBC,UACtD2D,EAAQnG,WAARmG,GAGF5D,IACAf,KAIF+P,EADsBhP,cAAiBqP,EAAvC,OACAL,EACA/P,KAGF,IA9DgC,EA8D1BqQ,EAAW7R,cAAjB,GACM+I,EAAQxG,cAAd,EACM,EAAN,oBACMuP,EAAavP,eAAnB,GACI2L,EAAWqD,MAAehP,EAAfgP,OAA2BhP,UA5B1C,EAtCgC,cAoELvC,GAAA,SAAsB,CAC/CuC,GAD+C,EAE/CtB,SAF+C,EAG/CuB,WAvE8B,IAoEhC,2BAII,8BAJO,EAIP,KAJJ,EAII,KACE1B,GAAJ,EAEA,GACEvH,SAAcwY,EAAdxY,YACAA,WACEiJ,GAASxC,YAHb,GAKE,MAGF,IAAMkC,EAAQuP,EAAd,QACMtK,EAAQnH,aAAd,GAEA,GAAIwB,QAAyBxB,cAA7B,GAAiE,CAC/Dc,KACA,IAAMyL,EAAajL,gBAAnB,GACA9B,QAAa,CACX2M,KADW,aAEX5S,KAFW,EAGX2U,WACA3B,eAIJ2B,EAAW3U,EAAKA,SAALA,IAAyBuH,OAApCoN,IAjG8B,8BAoGhC,SAAIhI,KAAoB,CACtB,IAAMhE,EAAQ2P,WAAoB7R,SAAlC,IACAS,eAGFgR,UACAI,gBAQJG,WAppB4C,SAopBlC,K,IAGR9L,yDAMI,GAECvS,cAAL,KACEkS,EAAQ,CAARA,IAGF,IAfQ,EAeF5R,EAAN,GAfQ,cAiBR,GAjBQ,IAiBR,2BAAyB,KAAzB,EAAyB,QACvBA,WAlBM,8BAqBRwM,oBAQFwR,YAjrB4C,SAirBjC,G,IAET/L,yDAMI,GAEJlG,yBAAkC,WAChC,QAAQiC,YAAR,MAAM,SAAN,MAAyBnB,aAAzB,aAAwC0B,aAAxC,SACA,IAAMD,UAAN,MAAW/C,EAAP,UAAJ,EAA6BoB,EAA7B,EAA6BA,MAE7B,MAIA,MAAIA,IACFA,EAAQJ,aACJwP,GAAUxQ,EADNgB,GAEJwB,YAAC,OAAIhC,aAFTY,KAKEJ,UAAJ,KACE+B,EAAKvC,WAALuC,IAOF,IAJA,IAAM2H,EAAWvJ,cAAoBX,cAApBW,GAAjB,KACMmF,EAAU9F,GAAA,QAAqB,CAAEuC,KAAI3B,QAAOqB,OAAMO,U,WAG7CyG,GACT,IAAM1P,EAAO0P,EAAb,QACA,EAAejJ,UAAf,GAAM,EAAN,oBACIqG,EAAQrG,WAAZ,GAEIc,GAAJ,IACEuF,EAAQ1F,gBAAmBuJ,EAAnBvJ,QAAR0F,IAGF5F,eAA6B,CAC3B8B,GAD2B,EAE3B3B,MAAOoB,YAAC,OAAIM,kBAA4BV,oBAFb,IAG3BY,WAZJ,MAFiB7O,MAAA,QAAoB,6CAAWqM,aAAX,MAErC,eAAgC,GAAhC,MAgBA,GACEkK,eAUNgI,UA5uB4C,SA4uBnC,K,IAGPhM,yDAMI,GAEJlG,yBAAkC,WAChC,QAAQiC,YAAR,MAAM,SAAN,MAAyBnB,aAAzB,aAAwC0B,aAAxC,SACI,EAAJ,EAAI,MAAJ,IAAaD,UAAb,MAAkB/C,EAAOG,UAAzB,EAEA,MAcA,GAVA,MAAIiB,IAEAA,EADEJ,UAAJ,GACUwP,GAAUxQ,EAAlBoB,GACSpB,WAAJ,GACGwC,YAAC,OAAIhC,kBAA8Ba,UAA3CD,IAEQoB,YAAC,OAAIhC,aAAbY,KAIAE,GAASH,WAAb,GAAgC,CAC9B,MAAqBA,SAArB,sBAAM,EAAN,KAAM,EAAN,KACMuJ,EAAWlK,GAAA,aAA4B,CAC3CkJ,SAAU,WAEZzI,gBAA8B,CAAE8B,GAAF,EAAW3B,QAAO4B,UAChD/B,gBAA8B,CAAE8B,GAAF,EAAa3B,QAAO4B,UAClDD,EAAK2H,EAAL3H,QAEA,MAAI2D,MACFzF,eAeJ,IAXA,IAWA,MAXc9M,MAAA,KACZqM,GAAA,QAAqB,CACnBuC,KACA3B,MAAOpB,cACHwC,YAAC,OAAIhC,aADFR,IAEHwC,YAAC,OAAIhC,YAJU,IAKnBiC,KALmB,SAMnBO,WAIJ,eAAkC,CAA7B,IAAL,EAAK,uBACG2P,EAAIxR,cACNA,kBAAuBX,WADjBW,IAAV,EAIA,MAIA,IAAMmF,EAAUnS,MAAA,KACdqM,GAAA,QAAqB,CAAEuC,GAAF,EAAS3B,QAAOqB,OAAMO,WAGzCsD,SAAJ,GAAwB,WACtB,IAAM,EAAN,oBACM4B,EAAO5B,EAAQA,SAArB,GACM,EAAN,oBACM,EAAN,oBACMwK,EAAa9P,eACfA,UADeA,GAEfA,YAFJ,GAIM6F,EAAQrG,aAAd,GACMoS,EAAkBpS,UAAxB,GACM,EAAN,oBACM+I,EAAQuH,SAAd,EACM+B,EAAc7R,QAAU8R,UAA9B,IACMC,EAAU,GAAH,aAAiB9S,SAAU,KACxCgB,mBAAwC,CAAE8B,GAAF,EAAmBC,UAE3D/B,eAA6B,CAC3B8B,GAD2B,EAE3B3B,MAAOoB,YAAC,OACNM,kBAAkCkQ,oBAHT,IAI3BtK,GAAImK,SAJuB,GAK3B7P,UAtBoB,WA8B1BiO,GAAqB,SAArBA,EAAsBjR,EAAD,GACzB,GAAI8C,aAAJ,GAA6B,CAC3B,IAAMyD,EAAN,EACA,QAAI/F,YAAJ,IAEO,IAAI+F,mBACF0K,EAAmBjR,EAAQuG,WAAlC,IAIG,OAAI/F,YAAJ,IAWHwR,GAAc,SAAChS,EAAD,GAClB,GAAImB,eAAJ,GACE,OAAO0F,EAAP,OAEA,MAAgB1F,SAAhB,GAAM,EAAN,oBACM4I,EAAWvJ,cAAjB,GAEA,OADAS,YAA0B,CAAE8B,GAAI8D,IACzBkD,EAAP,SAIEyG,GAAY,SAACxQ,EAAD,GAChB,MAAeQ,UAAf,GAAM,EAAN,oBACA,OAAOgC,YAAC,OAAIA,IAAZ,I,okBC78BK,IAAMyQ,GAA2C,CAKtDC,SALsD,SAK9C,G,IAENxM,yDAEI,GAEJ,IAAQE,YAAR,MAAe,SAAf,EACQzG,EAAR,EAAQA,UAER,KAEO,cAAIyG,EACT3F,YAA0Bd,EAA1Bc,aACK,aAAI2F,EACT3F,YAA0Bd,EAA1Bc,YACK,aAAI2F,EAAkB,CAC3B,MAAgBzF,SAAhB,sBAAM,EAAN,KACAF,oBACK,WAAI2F,EAAgB,CACzB,MAAgBzF,SAAhB,sBAAM,EAAN,KACAF,iBAQJkS,SAjCsD,SAiC9C,GACN,IAAQhT,EAAR,EAAQA,UAER,GACEH,QAAa,CACX2M,KADW,gBAEXI,WAFW,EAGXD,cAAe,QASrBsG,KAjDsD,SAiDlD,G,IAEF1M,yDAKI,GAEIvG,EAAR,EAAQA,UACR,IAAQ2G,gBAAR,MAAM,EAAN,MAAsBtF,YAAtB,MAAM,YAAN,MAA0CC,eAA1C,SACA,IAAMmF,YAAN,MAAa,KAAb,EAEA,MAIA,UAAIA,IACFA,EAAOzF,yBAAPyF,UAGF,QAAIA,IACFA,EAAOzF,0BAAPyF,SAGF,IAAM,EAAN,EAAM,OAAUhE,EAAhB,EAAgBA,MACVyQ,EAAO,CAAEvM,WAAUtF,QACnB6E,EAAN,GAEA,GAAIO,SAAJ,WAAoBA,EAAmB,CACrC,IAAMlE,EAAQjB,EACVjB,cADiB,GAEjBA,aAFJ,GAIA,IACE6F,YAIJ,GAAIO,SAAJ,UAAoBA,EAAkB,CACpC,IAAMlE,EAAQjB,EACVjB,cADiB,GAEjBA,aAFJ,GAIA,IACE6F,WAIJpF,uBAOFmP,OAzGsD,SAyGhD,KACJ,IAAQjQ,EAAR,EAAQA,UAGR,GAFAjK,EAASsK,WAATtK,GAEA,EACE+K,yBADF,CAKA,IAAKE,WAAL,GACE,MAAM,IAAInO,MAAM,qIAAV,OACuIwY,eAD7I,KAOFxL,QAAa,CACX2M,KADW,gBAEXI,WAFW,EAGXD,cAAe5W,MAQnBod,SArIsD,SAqI9C,K,IAGN5M,yDAEI,GAEIvG,EAAR,EAAQA,UACR,IAAMyG,YAAN,MAAa,OAAb,EAEA,MAIA,UAAIA,IACFA,EAAOzF,yBAAPyF,UAGF,QAAIA,IACFA,EAAOzF,0BAAPyF,SAGF,IAAM,EAAN,EAAM,OAAUhE,EAAhB,EAAgBA,MACVF,EAAQkE,eAAd,EAEA3F,iCACG2F,sBAAD,2BAQJ2M,aAvKsD,SAuK1C,KACV,IAAQpT,EAAR,EAAQA,UACFqT,EAAN,GACMC,EAAN,GAEA,MAIA,IAAK,IAAL,QAEK5B,oBACCxL,WACCuB,UAAavB,EAAbuB,OAA2BzH,EAF9B,SAGC0R,mBACCxL,UACCuB,UAAavB,EAAbuB,MAA0BzH,EAL7B,QAMC0R,wBAAkBA,GAAiBxL,OAAalG,EAPnD,MASEqT,KAAcrT,EAAdqT,GACAC,KAAcpN,EAAdoN,IAIA/f,sBAAJ,GACEsM,QAAa,CACX2M,KADW,gBAEXI,WAFW,EAGXD,cAAe2G,OCrLVC,GAAiC,CAK5C7d,OAL4C,SAKtC,G,IAEJ6Q,yDAOI,GAEJlG,yBAAkC,WAChC,QACEiB,eADF,aAEED,YAFF,MAAM,YAAN,MAGEsF,gBAHF,MAAM,EAAN,MAIE9D,aAJF,SAMA,IAAMD,UAAN,MAAW/C,EAAP,UAAJ,MAA6BmQ,eAA7B,SAEA,MAQA,GAJIhP,eAAqBA,eAAzB,KACE4B,EAAKA,EAALA,QAGE6E,WAAJ,GAAuB,CACrB,IAAM+L,EAAenT,GAAA,OAAoB,CAAEuC,KAAIN,KAAM,YAErD,IAAKO,GAAL,EAA4B,CAE1BD,EADA,wBAEK,CACL,IAAMsQ,EAAO,CAAE7R,OAAMsF,YAIrB/D,EAAK,CAAEJ,OAAF,EAAcC,MAHJnB,EACXjB,kBAAmCA,WADjB,IAElBA,iBAAkCA,SAFtC,KAIA2P,MAIJ,GAAInP,UAAJ,GACEC,iBAA+B,CAAE8B,KAAIC,eAIvC,IAAI7B,eAAJ,IAIA,MAAc,CACZ,MAAgBA,SAAhB,GAAM,EAAN,oBACMyS,EAAWpT,SAAjB,IAEKoH,YAAL,KACE7E,EAAKvC,GAAA,gBAA+B,CAAEwC,WAI1C,MAAmB7B,SAAnB,sBAAI,EAAJ,KAAI,EAAJ,KACM0S,EAAarT,GAAA,QAAqB,CACtCY,MAAOoB,YAAC,OAAIhC,aAD0B,IAEtCuC,GAFsC,EAGtCC,UAEI8H,EAAWtK,GAAA,QAAqB,CACpCY,MAAOoB,YAAC,OAAIhC,aADwB,IAEpCuC,GAFoC,EAGpCC,UAEI8Q,EACJD,OAA2B7S,UAAY6S,EAAZ7S,GAA2B8J,EADxD,IAEMiJ,EAAe/S,UAAYiH,EAAZjH,KAAwBkG,EAA7C,MACM8M,EAAYhR,EAAK,KAEnBxC,GAAA,OAAoB,CAAEuC,GAAF,EAAaN,KAAM,YACrCwR,EAAUjR,EAAK,KAEjBxC,GAAA,OAAoB,CAAEuC,GAAF,EAAWN,KAAM,YAGzC,KAAe,CACb,IAAMuE,EAASxG,YAAf,GAGEwG,MAEAhG,cAAgB6S,EAAhB7S,GAA+BgG,EAHjC,QAKEiB,KAIJ,KAAa,CACX,IAAMtB,EAAQnG,WAAd,GAEImG,MAAqB3F,cAAgB8J,EAAhB9J,GAA6B2F,EAAtD,QACEO,KAMJ,IACA,EAhGgC,EA+F1BZ,EAAN,GA/FgC,cAkGZ9F,GAAA,QAAqB,CAAEuC,KAAIC,WAlGf,IAkGhC,2BAAyD,KAAzD,EAAyD,QACvD,mBAAM,EAAN,KAAM,EAAN,KAEI8P,GAAJ,IAAgB9R,mBAKZgC,GAASxC,YAAX,KACEQ,cAAoBiH,EAArB,QAAqCjH,cAAoBkG,EAF5D,SAIEZ,UACAwM,MA9G4B,gCAkHhC,IAAMjJ,EAAW1V,MAAA,QAAoB,6CAAWqM,aAAX,MAC/B0T,EAAW1T,cAAjB,GACM2T,EAAS3T,cAAf,GAEA,IAAKuT,IAAL,EAAiC,CAC/B,IAAMrR,EAAQwR,EAAd,QACA,EAAe1T,UAAf,GAAM,EAAN,oBACQzG,EAAR,EAAQA,KACA+K,EAAR,EAAQA,OACFxC,EAAOF,aAAb,GACIE,SAAJ,GACEtC,EAAA,MAAa,CAAE2M,KAAF,cAAuB5S,KAAvB,EAA6B+K,SAAQxC,SAGtD,+BAAgC,CAA3B,IACGvI,EADR,KACE,QACAkH,iBAA+B,CAAE8B,GAAF,EAAYC,UAG7C,MAAc,CACZ,IAAMN,EAAQyR,EAAd,QACA,GAAe3T,UAAf,GAAM,GAAN,qBACQzG,GAAR,EAAQA,KACF+K,GAASiP,EAAe9L,EAAH,OAA3B,EACM3F,GAAOF,iBAAwB8E,EAArC,QACI5E,UAAJ,GACEtC,EAAA,MAAa,CAAE2M,KAAF,cAAuB5S,KAAvB,GAA6B+K,OAA7B,GAAqCxC,WAInDyR,GAAD,GAEAI,EAFA,SAGAD,EAJF,SAMEjT,gBAA8B,CAC5B8B,GAAIoR,EADwB,QAE5BhE,SAF4B,EAG5BnN,UAIJ,IAAMN,GAAQjB,EACVyS,WAAoBC,EADH,QAEjBA,WAAkBD,EAFtB,QAIIxN,YAAJ,IACEzF,sBASNgB,eA1L4C,SA0L9B,K,IAGZyE,yDAII,GAEJlG,yBAAkC,WAChC,QAAQ2P,eAAR,aAAyBnN,aAAzB,SACA,IAAMD,UAAN,MAAW/C,EAAOG,UAAlB,EAEA,GAAK+B,EAAL,QAIA,GAEO,GAAIf,WAAJ,GAKL,GAJA,IACE4B,EAAKvC,iBAALuC,IAGE5B,eAAJ,GACE4B,EAAKA,EAALA,WACK,CACL,MAAgB5B,SAAhB,GAAM,EAAN,oBAEA,IAAK6B,GAASxC,GAAA,OAAoB,CAAEuC,GAAImE,IACtC,OAGF,IAAM6C,EAAWvJ,cAAjB,GACAS,YAA0B,CAAE8B,OAC5BA,EAAKgH,EAALhH,aAEO/B,UAAJ,KACL+B,EAAKvC,WAALuC,IAGF,GAAKC,IAASxC,GAAA,OAAoB,CAAEuC,OAApC,CAMA,IAAMqR,EAAqB5T,GAAA,QAAqB,CAC9CuC,KACA3B,MAAOoB,YAAC,OAAIhC,cAFkC,IAG9CiC,KAH8C,UAI9CO,UAGF,KAAwB,CACtB,IAAM,EAAN,oBAEA,GAAIxC,aAAJ,GAEEuC,EADcvC,WAAd,QAEK,GAAIA,eAAJ,GAA4C,CAEjDuC,EADevC,YAAf,IAKJ,IAzDgC,EAyD1B6T,EAAa7T,GAAA,QAAqB,CACtCY,MAAOoB,YAAC,OAAIhC,aAD0B,IAEtCuC,KACAC,UAEI,EAAN,oBACMsR,EAAe9T,eAArB,GACM+T,EAAa/T,aAAnB,GACMgU,GAAcF,GAAiBA,GAArC,EACMG,GAAN,EACA,EAAsB3S,GAAA,MAAW,CAAE7B,SAAUiC,GAA7C,IAAM,EAAN,oBACA,EAAqBJ,GAAA,KAAU,CAAE7B,SAAUiC,GAA3C,IAAM,EAAN,oBAEMoE,EAAN,GACMoO,EAAU,SAAC,wCACf,QACEF,GACAxT,gBADAwT,IAEA1R,aAFA0R,KAGCxU,SAHDwU,KAICxU,WALH,OAWEyU,GACAzT,gBADAyT,IAEA3R,aAFA2R,KAGCzU,SAHDyU,KAICzU,WALH,KAlF8B,cA+FZ8B,GAAA,MAClB,CAAE7B,SAAUiC,GACZ,CAAE0G,KAAM8L,KAjGsB,IA+FhC,2BAGG,KAHH,EAGG,QACGzf,eAAuByf,EAA3B,IACEpO,WApG4B,8BA8GhC,IANA,IAAMqO,EAAN,GACMC,EAAN,GACMC,EAAN,GACIC,GAAJ,EACI1N,GAAJ,EAEA,uBAA8B,CAAzB,IAAL,EAAK,uBACCtE,kBAA4B9C,WAAhC,IACE8U,KACA1N,KACAwN,WACSE,EACTH,UAEAE,UAIJ,MAAsBrU,GAAA,QAAqB,CACzCuC,KACA3B,MAAOoB,YAAC,OAAInB,cAAkBb,cAFW,IAGzCiC,KAHyC,UAIzCO,UAJI,EAAN,oBAOM,EAAN,oBACM+R,EAAgBvU,eAAtB,GACMwU,EAAcxU,aAApB,GAEMyU,EAAYzU,aAEhB+T,EAAavT,QAAH,GAFZ,GAKMmT,EAAS3T,aAEbwU,EAAchU,QAAH,GAFb,GAKAC,gBAA8B,CAC5B8B,KACA3B,MAAOoB,YAAC,OACN4E,EACI5G,aADK,GAELa,cAAkBb,cALI,IAM5BiC,KAAM2E,EAAY,SANU,UAO5BpE,UAGF,IAAMkR,EAAW1T,cAEduU,GAAkBA,GAAnB,EACI/T,QADJ,GAFF,GA4BA,GArBAC,mBAAuC,CACrC8B,GAAImR,EADiC,QAErC9S,MAAOoB,YAAC,OAAInB,cAAkBb,cAFO,IAGrCiC,KAHqC,UAIrCO,UAGF/B,mBAAwC,CACtC8B,GAAIkS,EADkC,QAEtC7T,MAAOoB,YAAC,OAAIhC,aAF0B,IAGtCiC,KAHsC,SAItCO,UAGF/B,mBAAqC,CACnC8B,GAAIoR,EAD+B,QAEnC/S,MAAOoB,YAAC,OAAInB,cAAkBb,cAFK,IAGnCiC,KAHmC,UAInCO,WAGG0D,EAAL,GAAiB,CACf,MAGE3M,EADE8a,SAAJ,EACS7T,YAAcmT,EAArBpa,SACS6a,SAAJ,EACE5T,YAAciU,EAArBlb,SAEOiH,YAAckT,EAArBna,SAGF,IAAMmN,EAAM1G,SAAZ,GACAS,eAGFiT,UACAe,UACAd,gBAQJ9R,WAjZ4C,SAiZlC,K,IAGRqE,yDAGI,GAEJlG,yBAAkC,WAChC,QAAQwC,aAAR,SACA,IAAMD,UAAN,MAAW/C,EAAOG,UAAlB,EAEA,MAQA,GAJIa,UAAJ,KACE+B,EAAKvC,WAALuC,IAGE5B,WAAJ,GACE,GAAIA,eAAJ,GACE4B,EAAKA,EAALA,WACK,CACL,IAAMmE,EAAM/F,OAAZ,GAEA,IAAK6B,GAASxC,GAAA,OAAoB,CAAEuC,GAAImE,IACtC,OAGF,IAAM6C,EAAWvJ,cAAjB,GACAS,YAA0B,CAAE8B,KAAIC,UAChCD,EAAKgH,EAALhH,QACA9B,kBAAgC,CAAE0B,OAAF,EAAcC,MAAOG,IAIzD,GAAKC,IAASxC,GAAA,OAAoB,CAAEuC,OAApC,CAIA,QAAM,EAAN,EAAM,KAAQ+B,EAAd,EAAcA,OACVxC,SAAJ,GACEtC,EAAA,MAAa,CAAE2M,KAAF,cAAuB5S,OAAM+K,SAAQxC,gB,wkBCne7CrB,GAAU,eCwS6B,CAKlDuN,UALkD,SAKzC,KACPxO,WAAkBnB,GAAYmB,EAA9BA,UACA,IAAIG,EAAYH,aAAoBnB,GAAYmB,EAAhD,WAEA,IACEG,EAnSe,SAACH,EAAD,KACnB,OAAQZ,EAAR,MACE,kBACE,IAAM,EAAN,EAAM,KAAQgD,EAAd,EAAcA,KACR/G,EAASyG,YAAf,GACM5M,EAAQ6E,EAAKA,SAAnB,GAEA,GAAI7E,EAAQmG,WAAZ,OACE,MAAM,IAAIrI,MAAM,oDAAV,SAAN,2DAOF,GAFAqI,yBAEA,EAAe,qBACc8F,UAA3B,IADa,IACb,2BAAoD,8BAAzC,EAAyC,KAClDhB,EADkD,MACjCyH,eAAjBzH,IAFW,iCAMf,MAGF,kBACE,IAAM,EAAN,EAAQpG,KAAF,EAAN,EAAM,OAAgBuI,EAAtB,EAAsBA,KACtB,OAAIA,SAAmB,MACvB,IAAMF,EAAON,UAAb,GACMkF,EAAS5E,eAAf,GACMuE,EAAQvE,aAAd,GAGA,GAFAA,OAAY4E,IAAZ5E,EAEA,EAAe,qBACcjB,UAA3B,IADa,IACb,2BAAoD,8BAAzC,EAAyC,KAClDhB,EADkD,MACjCyH,eAAjBzH,IAFW,iCAMf,MAGF,iBACE,IAAQpG,EAAR,EAAQA,KACFqI,EAAON,SAAb,GACM+O,EAAW7P,YAAjB,GACMoC,EAAOtB,SAAb,GACMzG,EAASyG,YAAf,GACM5M,EAAQ6E,EAAKA,SAAnB,GAEA,GAAIsH,cAAqBA,UAAzB,GACE+B,QAAahB,EAAbgB,SACK,IAAK/B,UAAD,IAAuBA,UAA3B,GAGL,MAAM,IAAIrO,MAAM,kDAAV,sEAAN,IAHmD,OACnDoQ,uCAAsBhB,EAAtBgB,WASF,GAFA/H,uBAEA,EAAe,qBACc8F,UAA3B,IADa,IACb,2BAAoD,8BAAzC,EAAyC,KAClDhB,EADkD,MACjCyH,eAAjBzH,IAFW,iCAMf,MAGF,gBACE,IAAM,EAAN,EAAQpG,KAAM6J,EAAd,EAAcA,QAEd,GAAI5C,gBAAJ,GACE,MAAM,IAAIhO,MAAM,uBAAV,qCAAN,gDAKF,IAAMoP,EAAON,SAAb,GACMzG,EAASyG,YAAf,GACM5M,EAAQ6E,EAAKA,SAXH,GAmBhBsB,uBACA,IAAM6Z,EAAWlU,eAAjB,GACM+C,EAAYjC,SAAiBd,UAAnC,IACMgD,EAAWkR,EAASA,SAA1B,GAIA,GAFAnR,yBAEA,EAAe,qBACc5C,UAA3B,IADa,IACb,2BAAoD,8BAAzC,EAAyC,KAClDhB,EADkD,MACjCyH,eAAjBzH,IAFW,iCAMf,MAGF,kBACE,IAAQpG,EAAR,EAAQA,KACF7E,EAAQ6E,EAAKA,SAAnB,GAMA,GALe+H,YAAf,GACAzG,kBAJkB,GAQlB,EAAe,qBACc8F,UAA3B,IADa,IACb,2BAAoD,8BAAzC,EAAyC,KAApD,EAAoD,KAC5C/H,GAASwO,eAAf,GAEA,GAAIzH,SAAJ,MAAyB/G,GACvB+G,YACK,CACL,IADK,GACDiD,QAAiC,EACjCuC,QAAiC,EAFhC,eAIgB7D,SAArB,IAJK,IAIL,8BAAyC,gCAA9B,GAA8B,MAAzC,GAAyC,MACvC,QAAId,iBAEG,CACL2E,GAAO,CAACnD,GAARmD,IACA,MAHAvC,GAAO,CAACZ,GAARY,KANC,kCAaL,IACEV,OAAaU,GAAbV,GACAA,SAAeU,WAAfV,QACSiD,IACTjD,OAAaiD,GAAbjD,GACAA,YAEAvC,SA1BO,iCAgCf,MAGF,kBACE,IAAM,GAAN,EAAQpG,KAAF,GAAN,EAAc+K,OAAQxC,GAAtB,EAAsBA,KACtB,OAAIA,UAAmB,MACvB,IAAMF,GAAON,UAAb,IACMkF,GAAS5E,gBAAf,IACMuE,GAAQvE,cAAgB0C,GAASxC,GAAvC,QAGA,GAFAF,QAAY4E,GAAZ5E,GAEA,EAAe,uBACcjB,UAA3B,IADa,IACb,8BAAoD,gCAAzC,GAAyC,MAClDhB,EADkD,OACjCyH,gBAAjBzH,IAFW,mCAMf,MAGF,eACE,IAAM,GAAN,EAAQpG,KAAF,GAAN,EAAM,WAAoB+S,GAA1B,EAA0BA,cAE1B,OAAI/S,UACF,MAAM,IAAI/G,MAAV,2CAGF,IAAMoP,GAAON,SAAb,IAEA,IAAK,IAAL,SAAiC,CAC/B,GAAI9M,iBAAJ,SAA0BA,GACxB,MAAM,IAAIhC,MAAM,mBAAV,UAAN,yBAGF,IAAMM,GAAQwZ,GAAd,IAEA,MAAIxZ,UACK8O,GAAP,IAEAA,UAKJ,IAAK,IAAL,SACO0K,kBAAL,YACS1K,GAAP,IAIJ,MAGF,oBACE,IAAQ0K,GAAR,EAAQA,cAER,SAAIA,GACF3M,SACK,CACL,SAAIA,EAAmB,CACrB,IAAKgB,WAAL,IACE,MAAM,IAAInO,MAAM,mEAAV,OAC+DwY,eAD/D,IAAN,yCAOFrL,EAAY,GAAH,GAATA,IAGF,IAAK,IAAL,SAAiC,CAC/B,IAAM7M,GAAQwZ,GAAd,IAEA,SAAIxZ,GAAe,CACjB,GAAI0B,eAAJ,UAAwBA,GACtB,MAAM,IAAIhC,MAAM,sBAAV,UAAN,gCAGKmN,EAAP,SAEAA,UAKN,MAGF,iBACE,IAAM,GAAN,EAAQpG,KAAF,GAAN,EAAM,SAAkBgT,GAAxB,EAAwBA,WAExB,OAAIhT,UACF,MAAM,IAAI/G,MAAM,kDAAV,UAAN,6CAKF,IAGA,GAHMoP,GAAON,SAAb,IACMzG,GAASyG,YAAf,IACM5M,GAAQ6E,GAAKA,UAAnB,GAGA,GAAIsH,UAAJ,IAAuB,CACrB,IAAM2F,GAAS5E,gBAAf,IACMuE,GAAQvE,cAAd,IACAA,WACA+S,GAAU,GAAH,cAEL7S,KAAMqE,SAEH,CACL,IAAMK,GAAS5E,oBAAf,IACMuE,GAAQvE,kBAAd,IACAA,eAEA+S,GAAU,GAAH,cAELlV,SAAU0G,KAMd,GAFAtL,mBAAuBnG,GAAvBmG,QAEA,EAAe,uBACc8F,UAA3B,IADa,IACb,8BAAoD,gCAAzC,GAAyC,MAClDhB,EADkD,OACjCyH,gBAAjBzH,IAFW,oCASnB,SAagBiV,CAAapV,EAAQG,EAAjCA,GADF,QAGEH,WAAkBf,GAAYe,EAA9BA,UAGEA,YADF,EACqB3M,KACd4L,GADc5L,GAAnB2M,EAIAA,SD3Te,a,kCEavB,SAASqV,EAAevF,GACtB,OAAuB,KAXT,OADE3J,EAYA2J,IAXqB,kBAAR3J,IAA2C,IAAvBhS,MAAMC,QAAQ+R,KAYpB,oBAAtCzS,OAAO8B,UAAUvB,SAASH,KAAKgc,GAbtC,IAAkB3J,EAsCHH,IAtBf,SAAuB8J,GACrB,IAAIwF,EAAKC,EAET,OAA0B,IAAtBF,EAAevF,KAIC,oBADpBwF,EAAOxF,EAAE/b,gBAKoB,IAAzBshB,EADJE,EAAOD,EAAK9f,aAIiC,IAAzC+f,EAAK1hB,eAAe,qB,sBCrC1B,qBACE,SAAS6X,GAGV,IAAI8J,EAA4CC,EAQ5CC,GAL0CC,GAC7CA,EAAOF,QAI0B,iBAAVG,GAAsBA,GAC1CF,EAAWE,SAAWF,GAAcA,EAAWG,OAMnD,IAAIC,EAAgC,6QAChCC,EAAqB,sCAwBrBC,EAAU,CACb,QAAW,QACX,QAxBa,SAAVvU,EAAmBmJ,GActB,IAFA,IAAIxR,EAAS,GACTlE,GAXJ0V,EAASA,EAEPqL,QAAQH,GAA+B,SAASI,EAAIC,EAAIC,GAGxD,OAAO3U,EAAQ2U,GAAMD,KAGrBF,QAAQF,EAAoB,SAGX9iB,OACZiC,KACNkE,GAAUwR,EAAOyL,OAAOnhB,GAEzB,OAAOkE,SAiBD,KAANkd,aACC,OAAON,GADF,8BAvDN,K","file":"static/js/0.40d9995e.chunk.js","sourcesContent":["const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtypeObject,\n\tArchtypeArray,\n\tArchtypeMap,\n\tArchtypeSet,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === ArchtypeObject) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): 0 | 1 | 2 | 3 {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? ArchtypeArray\n\t\t: isMap(thing)\n\t\t? ArchtypeMap\n\t\t: isSet(thing)\n\t\t? ArchtypeSet\n\t\t: ArchtypeObject\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchtypeMap\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchtypeMap ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchtypeMap) thing.set(propOrOldValue, value)\n\telse if (t === ArchtypeSet) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tSetState,\n\tImmerScope,\n\tProxyObjectState,\n\tProxyArrayState,\n\tES5ObjectState,\n\tES5ArrayState,\n\tMapState,\n\tDRAFT_STATE\n} from \"../internal\"\n\nexport type Objectish = AnyObject | AnyArray | AnyMap | AnySet\nexport type ObjectishNoSet = AnyObject | AnyArray | AnyMap\n\nexport type AnyObject = {[key: string]: any}\nexport type AnyArray = Array<any>\nexport type AnySet = Set<any>\nexport type AnyMap = Map<any, any>\n\nexport const ArchtypeObject = 0\nexport const ArchtypeArray = 1\nexport const ArchtypeMap = 2\nexport const ArchtypeSet = 3\n\nexport const ProxyTypeProxyObject = 0\nexport const ProxyTypeProxyArray = 1\nexport const ProxyTypeES5Object = 4\nexport const ProxyTypeES5Array = 5\nexport const ProxyTypeMap = 2\nexport const ProxyTypeSet = 3\n\nexport interface ImmerBaseState {\n\tparent_?: ImmerState\n\tscope_: ImmerScope\n\tmodified_: boolean\n\tfinalized_: boolean\n\tisManual_: boolean\n}\n\nexport type ImmerState =\n\t| ProxyObjectState\n\t| ProxyArrayState\n\t| ES5ObjectState\n\t| ES5ArrayState\n\t| MapState\n\t| SetState\n\n// The _internal_ type used for drafts (not to be confused with Draft, which is public facing)\nexport type Drafted<Base = any, T extends ImmerState = ImmerState> = {\n\t[DRAFT_STATE]: T\n} & Base\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyTypeES5Array,\n\tProxyTypeES5Object,\n\tProxyTypeMap,\n\tProxyTypeSet,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\trootState: ImmerState,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: typeof ProxyTypeES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: typeof ProxyTypeES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: typeof ProxyTypeMap\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: typeof ProxyTypeSet\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyTypeProxyObject,\n\tProxyTypeProxyArray,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyTypeProxyObject ||\n\t\tstate.type_ === ProxyTypeProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyTypeES5Object,\n\tProxyTypeES5Array,\n\tProxyTypeSet,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE],\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumarable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyTypeES5Object || state.type_ === ProxyTypeES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyTypeSet ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyTypeSet && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyTypeProxyObject,\n\tProxyTypeProxyArray\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: typeof ProxyTypeProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: typeof ProxyTypeProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyTypeProxyArray : (ProxyTypeProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existig to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (state.copy_![prop] === value && typeof value !== \"number\") return true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyTypeProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\treturn objectTraps.deleteProperty!.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (\n\t\targ1: any,\n\t\targ2?: any,\n\t\targ3?: any\n\t): any => {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst nextState = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches(base: Objectish, patches: Patch[]) {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches.slice(i + 1))\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtypeMap,\n\tArchtypeSet,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === ArchtypeSet ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase ArchtypeMap:\n\t\t\treturn new Map(value)\n\t\tcase ArchtypeSet:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n","// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Transforms.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          if (!FLUSHING.get(editor)) {\n            editor.onChange()\n          }\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: (direction?: 'forward' | 'backward') => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor, { reverse: direction === 'backward' })\n      }\n    },\n\n    getFragment: () => {\n      const { selection } = editor\n\n      if (selection) {\n        return Node.fragment(editor, selection)\n      }\n      return []\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const currentNode = Node.get(editor, path)\n        if (Text.isText(currentNode)) continue\n        const child = node.children[i] as Descendant\n        const prev = currentNode.children[n - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          if (!FLUSHING.get(editor)) {\n            editor.onChange()\n          }\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation): Path[] => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      const newParent = newAncestors[newAncestors.length - 1]\n      const newIndex = newPath[newPath.length - 1]\n      const resultPath = newParent.concat(newIndex)\n\n      return [...oldAncestors, ...newAncestors, resultPath]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path, Descendant, ExtendedType, Ancestor } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface BaseElement {\n  children: Descendant[]\n}\n\nexport type Element = ExtendedType<'Element', BaseElement>\n\nexport interface ElementInterface {\n  isAncestor: (value: any) => value is Ancestor\n  isElement: (value: any) => value is Element\n  isElementList: (value: any) => value is Element[]\n  isElementProps: (props: any) => props is Partial<Element>\n  matches: (element: Element, props: Partial<Element>) => boolean\n}\n\nexport const Element: ElementInterface = {\n  /**\n   * Check if a value implements the 'Ancestor' interface.\n   */\n\n  isAncestor(value: any): value is Ancestor {\n    return isPlainObject(value) && Node.isNodeList(value.children)\n  },\n\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return Array.isArray(value) && value.every(val => Element.isElement(val))\n  },\n\n  /**\n   * Check if a set of props is a partial of Element.\n   */\n\n  isElementProps(props: any): props is Partial<Element> {\n    return (props as Partial<Element>).children !== undefined\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import isPlainObject from 'is-plain-object'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  ExtendedType,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n  Transforms,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\nimport { Descendant } from './node'\nimport { Element } from './element'\n\nexport type BaseSelection = Range | null\n\nexport type Selection = ExtendedType<'Selection', BaseSelection>\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface BaseEditor {\n  children: Descendant[]\n  selection: Selection\n  operations: Operation[]\n  marks: Omit<Text, 'text'> | null\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: (direction?: 'forward' | 'backward') => void\n  getFragment: () => Descendant[]\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport type Editor = ExtendedType<'Editor', BaseEditor>\n\nexport interface EditorInterface {\n  above: <T extends Ancestor>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  addMark: (editor: Editor, key: string, value: any) => void\n  after: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    }\n  ) => Point | undefined\n  before: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    }\n  ) => Point | undefined\n  deleteBackward: (\n    editor: Editor,\n    options?: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  ) => void\n  deleteForward: (\n    editor: Editor,\n    options?: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  ) => void\n  deleteFragment: (\n    editor: Editor,\n    options?: {\n      direction?: 'forward' | 'backward'\n    }\n  ) => void\n  edges: (editor: Editor, at: Location) => [Point, Point]\n  end: (editor: Editor, at: Location) => Point\n  first: (editor: Editor, at: Location) => NodeEntry\n  fragment: (editor: Editor, at: Location) => Descendant[]\n  hasBlocks: (editor: Editor, element: Element) => boolean\n  hasInlines: (editor: Editor, element: Element) => boolean\n  hasPath: (editor: Editor, path: Path) => boolean\n  hasTexts: (editor: Editor, element: Element) => boolean\n  insertBreak: (editor: Editor) => void\n  insertFragment: (editor: Editor, fragment: Node[]) => void\n  insertNode: (editor: Editor, node: Node) => void\n  insertText: (editor: Editor, text: string) => void\n  isBlock: (editor: Editor, value: any) => value is Element\n  isEditor: (value: any) => value is Editor\n  isEnd: (editor: Editor, point: Point, at: Location) => boolean\n  isEdge: (editor: Editor, point: Point, at: Location) => boolean\n  isEmpty: (editor: Editor, element: Element) => boolean\n  isInline: (editor: Editor, value: any) => value is Element\n  isNormalizing: (editor: Editor) => boolean\n  isStart: (editor: Editor, point: Point, at: Location) => boolean\n  isVoid: (editor: Editor, value: any) => value is Element\n  last: (editor: Editor, at: Location) => NodeEntry\n  leaf: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry<Text>\n  levels: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<NodeEntry<T>, void, undefined>\n  marks: (editor: Editor) => Omit<Text, 'text'> | null\n  next: <T extends Descendant>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  node: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry\n  nodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<NodeEntry<T>, void, undefined>\n  normalize: (\n    editor: Editor,\n    options?: {\n      force?: boolean\n    }\n  ) => void\n  parent: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry<Ancestor>\n  path: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => Path\n  pathRef: (\n    editor: Editor,\n    path: Path,\n    options?: {\n      affinity?: 'backward' | 'forward' | null\n    }\n  ) => PathRef\n  pathRefs: (editor: Editor) => Set<PathRef>\n  point: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      edge?: 'start' | 'end'\n    }\n  ) => Point\n  pointRef: (\n    editor: Editor,\n    point: Point,\n    options?: {\n      affinity?: 'backward' | 'forward' | null\n    }\n  ) => PointRef\n  pointRefs: (editor: Editor) => Set<PointRef>\n  positions: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<Point, void, undefined>\n  previous: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  range: (editor: Editor, at: Location, to?: Location) => Range\n  rangeRef: (\n    editor: Editor,\n    range: Range,\n    options?: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    }\n  ) => RangeRef\n  rangeRefs: (editor: Editor) => Set<RangeRef>\n  removeMark: (editor: Editor, key: string) => void\n  start: (editor: Editor, at: Location) => Point\n  string: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      voids?: boolean\n    }\n  ) => string\n  unhangRange: (\n    editor: Editor,\n    range: Range,\n    options?: {\n      voids?: boolean\n    }\n  ) => Range\n  void: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<Element> | undefined\n  withoutNormalizing: (editor: Editor, fn: () => void) => void\n}\n\nconst IS_EDITOR_CACHE = new WeakMap<object, boolean>()\n\nexport const Editor: EditorInterface = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(\n    editor: Editor,\n    options: {\n      direction?: 'forward' | 'backward'\n    } = {}\n  ): void {\n    const { direction = 'forward' } = options\n    editor.deleteFragment(direction)\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    if (!isPlainObject(value)) return false\n    const cachedIsEditor = IS_EDITOR_CACHE.get(value)\n    if (cachedIsEditor !== undefined) {\n      return cachedIsEditor\n    }\n    const isEditor =\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    IS_EDITOR_CACHE.set(value, isEditor)\n    return isEditor\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n, p)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Omit<Text, 'text'> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Descendant>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const pointAfterLocation = Editor.after(editor, at, { voids })\n\n    if (!pointAfterLocation) return\n\n    const [, to] = Editor.last(editor, [])\n\n    const span: Span = [pointAfterLocation.path, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const nodeEntries = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of nodeEntries) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node, path)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ): void {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      /*\n        Fix dirty elements with no children.\n        editor.normalizeNode() does fix this, but some normalization fixes also require it to work.\n        Running an initial pass avoids the catch-22 race condition.\n      */\n      for (const dirtyPath of getDirtyPaths(editor)) {\n        if (Node.has(editor, dirtyPath)) {\n          const [node, _] = Editor.node(editor, dirtyPath)\n\n          // Add a text child to elements with no children.\n          // This is safe to do in any order, by definition it can't cause other paths to change.\n          if (Element.isElement(node) && node.children.length === 0) {\n            const child = { text: '' }\n            Transforms.insertNodes(editor, child, {\n              at: dirtyPath.concat(0),\n              voids: true,\n            })\n          }\n        }\n      }\n\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const dirtyPath = getDirtyPaths(editor).pop()!\n\n        // If the node doesn't exist in the tree, it does not need to be normalized.\n        if (Node.has(editor, dirtyPath)) {\n          const entry = Editor.node(editor, dirtyPath)\n          editor.normalizeNode(entry)\n        }\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  hasPath(editor: Editor, path: Path): boolean {\n    return Node.has(editor, path)\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Return all the positions in `at` range where a `Point` can be placed.\n   *\n   * By default, moves forward by individual offsets at a time, but\n   * the `unit` option can be used to to move by character, word, line, or block.\n   *\n   * The `reverse` option can be used to change iteration direction.\n   *\n   * Note: By default void nodes are treated as a single point and iteration\n   * will not happen inside their content unless you pass in true for the\n   * `voids` option, then iteration will occur.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<Point, void, undefined> {\n    const {\n      at = editor.selection,\n      unit = 'offset',\n      reverse = false,\n      voids = false,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    /**\n     * Algorithm notes:\n     *\n     * Each step `distance` is dynamic depending on the underlying text\n     * and the `unit` specified.  Each step, e.g., a line or word, may\n     * span multiple text nodes, so we iterate through the text both on\n     * two levels in step-sync:\n     *\n     * `leafText` stores the text on a text leaf level, and is advanced\n     * through using the counters `leafTextOffset` and `leafTextRemaining`.\n     *\n     * `blockText` stores the text on a block level, and is shortened\n     * by `distance` every time it is advanced.\n     *\n     * We only maintain a window of one blockText and one leafText because\n     * a block node always appears before all of its leaf nodes.\n     */\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let isNewBlock = false\n    let blockText = ''\n    let distance = 0 // Distance for leafText to catch up to blockText.\n    let leafTextRemaining = 0\n    let leafTextOffset = 0\n\n    // Iterate through all nodes in range, grabbing entire textual content\n    // of block nodes in blockText, and text nodes in leafText.\n    // Exploits the fact that nodes are sequenced in such a way that we first\n    // encounter the block node, then all of its text nodes, so when iterating\n    // through the blockText and leafText we just need to remember a window of\n    // one block node and leaf node, respectively.\n    for (const [node, path] of Editor.nodes(editor, { at, reverse, voids })) {\n      /*\n       * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\n       */\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, so by default we will always\n        // yield their first point. If the `voids` option is set to true,\n        // then we will iterate over their content.\n        if (!voids && editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        // Inline element nodes are ignored as they don't themselves\n        // contribute to `blockText` or `leafText` - their parent and\n        // children do.\n        if (editor.isInline(node)) continue\n\n        // Block element node - set `blockText` to its text content.\n        if (Editor.hasInlines(editor, node)) {\n          // We always exhaust block nodes before encountering a new one:\n          //   console.assert(blockText === '',\n          //     `blockText='${blockText}' - `+\n          //     `not exhausted before new block node`, path)\n\n          // Ensure range considered is capped to `range`, in the\n          // start/end edge cases where block extends beyond range.\n          // Equivalent to this, but presumably more performant:\n          //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n          //   blockRange = Range.intersection(range, blockRange) // intersect\n          //   blockText = Editor.string(editor, blockRange, { voids })\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          blockText = Editor.string(editor, { anchor: s, focus: e }, { voids })\n          blockText = reverse ? reverseText(blockText) : blockText\n          isNewBlock = true\n        }\n      }\n\n      /*\n       * TEXT LEAF NODE - Iterate through text content, yielding\n       * positions every `distance` offset according to `unit`.\n       */\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n\n        // Proof that we always exhaust text nodes before encountering a new one:\n        //   console.assert(leafTextRemaining <= 0,\n        //     `leafTextRemaining=${leafTextRemaining} - `+\n        //     `not exhausted before new leaf text node`, path)\n\n        // Reset `leafText` counters for new text node.\n        if (isFirst) {\n          leafTextRemaining = reverse\n            ? first.offset\n            : node.text.length - first.offset\n          leafTextOffset = first.offset // Works for reverse too.\n        } else {\n          leafTextRemaining = node.text.length\n          leafTextOffset = reverse ? leafTextRemaining : 0\n        }\n\n        // Yield position at the start of node (potentially).\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset: leafTextOffset }\n          isNewBlock = false\n        }\n\n        // Yield positions every (dynamically calculated) `distance` offset.\n        while (true) {\n          // If `leafText` has caught up with `blockText` (distance=0),\n          // and if blockText is exhausted, break to get another block node,\n          // otherwise advance blockText forward by the new `distance`.\n          if (distance === 0) {\n            if (blockText === '') break\n            distance = calcDistance(blockText, unit)\n            blockText = blockText.slice(distance)\n          }\n\n          // Advance `leafText` by the current `distance`.\n          leafTextOffset = reverse\n            ? leafTextOffset - distance\n            : leafTextOffset + distance\n          leafTextRemaining = leafTextRemaining - distance\n\n          // If `leafText` is exhausted, break to get a new leaf node\n          // and set distance to the overflow amount, so we'll (maybe)\n          // catch up to blockText in the next leaf text node.\n          if (leafTextRemaining < 0) {\n            distance = -leafTextRemaining\n            break\n          }\n\n          // Successfully walked `distance` offsets through `leafText`\n          // to catch up with `blockText`, so we can reset `distance`\n          // and yield this position in this node.\n          distance = 0\n          yield { path, offset: leafTextOffset }\n        }\n      }\n    }\n    // Proof that upon completion, we've exahusted both leaf and block text:\n    //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n    //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n\n    // Helper:\n    // Return the distance in offsets for a step of size `unit` on given string.\n    function calcDistance(text: string, unit: string) {\n      if (unit === 'character') {\n        return getCharacterDistance(text)\n      } else if (unit === 'word') {\n        return getWordDistance(text)\n      } else if (unit === 'line' || unit === 'block') {\n        return text.length\n      }\n      return 1\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const pointBeforeLocation = Editor.before(editor, at, { voids })\n\n    if (!pointBeforeLocation) {\n      return\n    }\n\n    const [, to] = Editor.first(editor, [])\n\n    // The search location is from the start of the document to the path of\n    // the point before the location passed in\n    const span: Span = [pointBeforeLocation.path, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: by default the text of void nodes is considered to be an empty\n   * string, regardless of content, unless you pass in true for the voids option\n   */\n\n  string(\n    editor: Editor,\n    at: Location,\n    options: {\n      voids?: boolean\n    } = {}\n  ): string {\n    const { voids = false } = options\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n      voids,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids,\n    })) {\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    try {\n      fn()\n    } finally {\n      NORMALIZING.set(editor, value)\n    }\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\nexport type NodeMatch<T extends Node> =\n  | ((node: Node, path: Path) => node is T)\n  | ((node: Node, path: Path) => boolean)\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport interface LocationInterface {\n  isLocation: (value: any) => value is Location\n}\n\nexport const Location: LocationInterface = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport interface SpanInterface {\n  isSpan: (value: any) => value is Span\n}\n\nexport const Span: SpanInterface = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Path, Range, Text } from '..'\nimport { Element, ElementEntry } from './element'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type BaseNode = Editor | Element | Text\nexport type Node = Editor | Element | Text\n\nexport interface NodeInterface {\n  ancestor: (root: Node, path: Path) => Ancestor\n  ancestors: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry<Ancestor>, void, undefined>\n  child: (root: Node, index: number) => Descendant\n  children: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n  common: (root: Node, path: Path, another: Path) => NodeEntry\n  descendant: (root: Node, path: Path) => Descendant\n  descendants: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n  elements: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<ElementEntry, void, undefined>\n  extractProps: (node: Node) => NodeProps\n  first: (root: Node, path: Path) => NodeEntry\n  fragment: (root: Node, range: Range) => Descendant[]\n  get: (root: Node, path: Path) => Node\n  has: (root: Node, path: Path) => boolean\n  isNode: (value: any) => value is Node\n  isNodeList: (value: any) => value is Node[]\n  last: (root: Node, path: Path) => NodeEntry\n  leaf: (root: Node, path: Path) => Text\n  levels: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry, void, undefined>\n  matches: (node: Node, props: Partial<Node>) => boolean\n  nodes: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry, void, undefined>\n  parent: (root: Node, path: Path) => Ancestor\n  string: (node: Node) => string\n  texts: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry<Text>, void, undefined>\n}\n\nconst IS_NODE_LIST_CACHE = new WeakMap<any[], boolean>()\n\nexport const Node: NodeInterface = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Extract props from a Node.\n   */\n\n  extractProps(node: Node): NodeProps {\n    if (Element.isAncestor(node)) {\n      const { children, ...properties } = node\n\n      return properties\n    } else {\n      const { text, ...properties } = node\n\n      return properties\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce({ children: root.children }, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      if (Editor.isEditor(r)) {\n        r.selection = null\n      }\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    if (!Array.isArray(value)) {\n      return false\n    }\n    const cachedResult = IS_NODE_LIST_CACHE.get(value)\n    if (cachedResult !== undefined) {\n      return cachedResult\n    }\n    const isNodeList = value.every(val => Node.isNode(val))\n    IS_NODE_LIST_CACHE.set(value, isNodeList)\n    return isNodeList\n  },\n\n  /**\n   * Get the last node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) &&\n        Element.isElementProps(props) &&\n        Element.matches(node, props)) ||\n      (Text.isText(node) &&\n        Text.isTextProps(props) &&\n        Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't descended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n\n/**\n * Convenience type for returning the props of a node.\n */\nexport type NodeProps =\n  | Omit<Editor, 'children'>\n  | Omit<Element, 'children'>\n  | Omit<Text, 'text'>\n","import { ExtendedType, Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type BaseInsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n}\n\nexport type InsertNodeOperation = ExtendedType<\n  'InsertNodeOperation',\n  BaseInsertNodeOperation\n>\n\nexport type BaseInsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type InsertTextOperation = ExtendedType<\n  'InsertTextOperation',\n  BaseInsertTextOperation\n>\n\nexport type BaseMergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type MergeNodeOperation = ExtendedType<\n  'MergeNodeOperation',\n  BaseMergeNodeOperation\n>\n\nexport type BaseMoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n}\n\nexport type MoveNodeOperation = ExtendedType<\n  'MoveNodeOperation',\n  BaseMoveNodeOperation\n>\n\nexport type BaseRemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n}\n\nexport type RemoveNodeOperation = ExtendedType<\n  'RemoveNodeOperation',\n  BaseRemoveNodeOperation\n>\n\nexport type BaseRemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type RemoveTextOperation = ExtendedType<\n  'RemoveTextOperation',\n  BaseRemoveTextOperation\n>\n\nexport type BaseSetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n}\n\nexport type SetNodeOperation = ExtendedType<\n  'SetNodeOperation',\n  BaseSetNodeOperation\n>\n\nexport type BaseSetSelectionOperation =\n  | {\n      type: 'set_selection'\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      properties: Range\n      newProperties: null\n    }\n\nexport type SetSelectionOperation = ExtendedType<\n  'SetSelectionOperation',\n  BaseSetSelectionOperation\n>\n\nexport type BaseSplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type SplitNodeOperation = ExtendedType<\n  'SplitNodeOperation',\n  BaseSplitNodeOperation\n>\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport interface OperationInterface {\n  isNodeOperation: (value: any) => value is NodeOperation\n  isOperation: (value: any) => value is Operation\n  isOperationList: (value: any) => value is Operation[]\n  isSelectionOperation: (value: any) => value is SelectionOperation\n  isTextOperation: (value: any) => value is TextOperation\n  inverse: (op: Operation) => Operation\n}\n\nexport const Operation: OperationInterface = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) && value.every(val => Operation.isOperation(val))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport interface PathInterface {\n  ancestors: (path: Path, options?: { reverse?: boolean }) => Path[]\n  common: (path: Path, another: Path) => Path\n  compare: (path: Path, another: Path) => -1 | 0 | 1\n  endsAfter: (path: Path, another: Path) => boolean\n  endsAt: (path: Path, another: Path) => boolean\n  endsBefore: (path: Path, another: Path) => boolean\n  equals: (path: Path, another: Path) => boolean\n  hasPrevious: (path: Path) => boolean\n  isAfter: (path: Path, another: Path) => boolean\n  isAncestor: (path: Path, another: Path) => boolean\n  isBefore: (path: Path, another: Path) => boolean\n  isChild: (path: Path, another: Path) => boolean\n  isCommon: (path: Path, another: Path) => boolean\n  isDescendant: (path: Path, another: Path) => boolean\n  isParent: (path: Path, another: Path) => boolean\n  isPath: (value: any) => value is Path\n  isSibling: (path: Path, another: Path) => boolean\n  levels: (\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Path[]\n  next: (path: Path) => Path\n  parent: (path: Path) => Path\n  previous: (path: Path) => Path\n  relative: (path: Path, ancestor: Path) => Path\n  transform: (\n    path: Path,\n    operation: Operation,\n    options?: { affinity?: 'forward' | 'backward' | null }\n  ) => Path | null\n}\n\nexport const Path: PathInterface = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              copy[op.length - 1] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.isSibling(op, onp) &&\n            (Path.isAncestor(onp, p) || Path.equals(onp, p))\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            } else {\n              p[op.length - 1] += 1\n            }\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport interface PathRefInterface {\n  transform: (ref: PathRef, op: Operation) => void\n}\n\nexport const PathRef: PathRefInterface = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { ExtendedType, Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface BasePoint {\n  path: Path\n  offset: number\n}\n\nexport type Point = ExtendedType<'Point', BasePoint>\n\nexport interface PointInterface {\n  compare: (point: Point, another: Point) => -1 | 0 | 1\n  isAfter: (point: Point, another: Point) => boolean\n  isBefore: (point: Point, another: Point) => boolean\n  equals: (point: Point, another: Point) => boolean\n  isPoint: (value: any) => value is Point\n  transform: (\n    point: Point,\n    op: Operation,\n    options?: { affinity?: 'forward' | 'backward' | null }\n  ) => Point | null\n}\n\nexport const Point: PointInterface = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport interface PointRefInterface {\n  transform: (ref: PointRef, op: Operation) => void\n}\n\nexport const PointRef: PointRefInterface = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { ExtendedType, Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface BaseRange {\n  anchor: Point\n  focus: Point\n}\n\nexport type Range = ExtendedType<'Range', BaseRange>\n\nexport interface RangeInterface {\n  edges: (\n    range: Range,\n    options?: {\n      reverse?: boolean\n    }\n  ) => [Point, Point]\n  end: (range: Range) => Point\n  equals: (range: Range, another: Range) => boolean\n  includes: (range: Range, target: Path | Point | Range) => boolean\n  intersection: (range: Range, another: Range) => Range | null\n  isBackward: (range: Range) => boolean\n  isCollapsed: (range: Range) => boolean\n  isExpanded: (range: Range) => boolean\n  isForward: (range: Range) => boolean\n  isRange: (value: any) => value is Range\n  points: (range: Range) => Generator<PointEntry, void, undefined>\n  start: (range: Range) => Point\n  transform: (\n    range: Range,\n    op: Operation,\n    options?: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    }\n  ) => Range | null\n}\n\nexport const Range: RangeInterface = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    } = {}\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport interface RangeRefInterface {\n  transform: (ref: RangeRef, op: Operation) => void\n}\n\nexport const RangeRef: RangeRefInterface = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport isEqual from 'fast-deep-equal'\nimport { Range } from '..'\nimport { ExtendedType } from './custom-types'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface BaseText {\n  text: string\n}\n\nexport type Text = ExtendedType<'Text', BaseText>\n\nexport interface TextInterface {\n  equals: (text: Text, another: Text, options?: { loose?: boolean }) => boolean\n  isText: (value: any) => value is Text\n  isTextList: (value: any) => value is Text[]\n  isTextProps: (props: any) => props is Partial<Text>\n  matches: (text: Text, props: Partial<Text>) => boolean\n  decorations: (node: Text, decorations: Range[]) => Text[]\n}\n\nexport const Text: TextInterface = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    function omitText(obj: Record<any, any>) {\n      const { text, ...rest } = obj\n\n      return rest\n    }\n\n    return isEqual(\n      loose ? omitText(text) : text,\n      loose ? omitText(another) : another\n    )\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && value.every(val => Text.isText(val))\n  },\n\n  /**\n   * Check if some props are a partial of Text.\n   */\n\n  isTextProps(props: any): props is Partial<Text> {\n    return (props as Partial<Text>).text !== undefined\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (!text.hasOwnProperty(key) || text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= o) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n        if (\n          (start.offset !== end.offset &&\n            (start.offset === o || end.offset === offset)) ||\n          start.offset > o ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < o) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n  NodeEntry,\n  Ancestor,\n} from '..'\nimport { NodeMatch } from '../interfaces/editor'\n\nexport interface NodeTransforms {\n  insertNodes: <T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    }\n  ) => void\n  liftNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => void\n  mergeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  moveNodes: <T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) => void\n  removeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  setNodes: <T extends Node>(\n    editor: Editor,\n    props: Partial<Node>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  splitNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    }\n  ) => void\n  unsetNodes: <T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  unwrapNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  wrapNodes: <T extends Node>(\n    editor: Editor,\n    element: Element,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n}\n\nexport const NodeTransforms: NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes<T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const parentNodeEntry = Editor.node(editor, Path.parent(path))\n        const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n => levels.includes(n) && hasSingleChildNest(editor, n),\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n\n        if (\n          toRef.current &&\n          Path.isSibling(newPath, path) &&\n          Path.isAfter(newPath, path)\n        ) {\n          // When performing a sibling move to a later index, the path at the destination is shifted\n          // to before the insertion point instead of after. To ensure our group of nodes are inserted\n          // in the correct order we increment toRef to account for that\n          toRef.current = Path.next(toRef.current)\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes<T extends Node>(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n          always: !endAtEndOfNode,\n        })\n        const startAtStartOfNode = Editor.isStart(editor, start, start.path)\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n          always: !startAtStartOfNode,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            // Omit new properties from the old property list rather than set them to undefined\n            if (node.hasOwnProperty(k)) properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const properties = Node.extractProps(node)\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes<T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path)\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => Element.isAncestor(node) && node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes<T extends Node>(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'lowest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const commonNodeEntry = Editor.node(editor, commonPath)\n          const [commonNode] = commonNodeEntry\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n =>\n              Element.isAncestor(commonNode) && commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\nconst hasSingleChildNest = (editor: Editor, node: Node): boolean => {\n  if (Element.isElement(node)) {\n    const element = node as Element\n    if (Editor.isVoid(editor, node)) {\n      return true\n    } else if (element.children.length === 1) {\n      return hasSingleChildNest(editor, element.children[0])\n    } else {\n      return false\n    }\n  } else if (Editor.isEditor(node)) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport interface SelectionTransforms {\n  collapse: (\n    editor: Editor,\n    options?: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  deselect: (editor: Editor) => void\n  move: (\n    editor: Editor,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  select: (editor: Editor, target: Location) => void\n  setPoint: (\n    editor: Editor,\n    props: Partial<Point>,\n    options?: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  setSelection: (editor: Editor, props: Partial<Range>) => void\n}\n\nexport const SelectionTransforms: SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor): void {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location): void {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n    })\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>): void {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport interface TextTransforms {\n  delete: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: {\n      at?: Location\n      voids?: boolean\n    }\n  ) => void\n}\n\nexport const TextTransforms: TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        const [, end] = Range.edges(at)\n        const endOfDoc = Editor.end(editor, [])\n\n        if (!Point.equals(end, endOfDoc)) {\n          at = Editor.unhangRange(editor, at, { voids })\n        }\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        if (text.length > 0)\n          editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        if (text.length > 0)\n          editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = reverse\n        ? startRef.unref() || endRef.unref()\n        : endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      if (text.length > 0)\n        editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms: GeneralTransforms &\n  NodeTransforms &\n  SelectionTransforms &\n  TextTransforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Selection,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Ancestor,\n} from '..'\n\nexport interface GeneralTransforms {\n  transform: (editor: Editor, op: Operation) => void\n}\n\nconst applyToDraft = (editor: Editor, selection: Selection, op: Operation) => {\n  switch (op.type) {\n    case 'insert_node': {\n      const { path, node } = op\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      if (index > parent.children.length) {\n        throw new Error(\n          `Cannot apply an \"insert_node\" operation at path [${path}] because the destination is past the end of the node.`\n        )\n      }\n\n      parent.children.splice(index, 0, node)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const { path, offset, text } = op\n      if (text.length === 0) break\n      const node = Node.leaf(editor, path)\n      const before = node.text.slice(0, offset)\n      const after = node.text.slice(offset)\n      node.text = before + text + after\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const node = Node.get(editor, path)\n      const prevPath = Path.previous(path)\n      const prev = Node.get(editor, prevPath)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      if (Text.isText(node) && Text.isText(prev)) {\n        prev.text += node.text\n      } else if (!Text.isText(node) && !Text.isText(prev)) {\n        prev.children.push(...node.children)\n      } else {\n        throw new Error(\n          `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interfaces: ${node} ${prev}`\n        )\n      }\n\n      parent.children.splice(index, 1)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.isAncestor(path, newPath)) {\n        throw new Error(\n          `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n        )\n      }\n\n      const node = Node.get(editor, path)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, op)!\n      const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n      const newIndex = truePath[truePath.length - 1]\n\n      newParent.children.splice(newIndex, 0, node)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const index = path[path.length - 1]\n      const parent = Node.parent(editor, path)\n      parent.children.splice(index, 1)\n\n      // Transform all of the points in the value, but if the point was in the\n      // node that was removed we need to update the range or remove it.\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          const result = Point.transform(point, op)\n\n          if (selection != null && result != null) {\n            selection[key] = result\n          } else {\n            let prev: NodeEntry<Text> | undefined\n            let next: NodeEntry<Text> | undefined\n\n            for (const [n, p] of Node.texts(editor)) {\n              if (Path.compare(p, path) === -1) {\n                prev = [n, p]\n              } else {\n                next = [n, p]\n                break\n              }\n            }\n\n            if (prev) {\n              point.path = prev[1]\n              point.offset = prev[0].text.length\n            } else if (next) {\n              point.path = next[1]\n              point.offset = 0\n            } else {\n              selection = null\n            }\n          }\n        }\n      }\n\n      break\n    }\n\n    case 'remove_text': {\n      const { path, offset, text } = op\n      if (text.length === 0) break\n      const node = Node.leaf(editor, path)\n      const before = node.text.slice(0, offset)\n      const after = node.text.slice(offset + text.length)\n      node.text = before + after\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'set_node': {\n      const { path, properties, newProperties } = op\n\n      if (path.length === 0) {\n        throw new Error(`Cannot set properties on the root node!`)\n      }\n\n      const node = Node.get(editor, path)\n\n      for (const key in newProperties) {\n        if (key === 'children' || key === 'text') {\n          throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n        }\n\n        const value = newProperties[key]\n\n        if (value == null) {\n          delete node[key]\n        } else {\n          node[key] = value\n        }\n      }\n\n      // properties that were previously defined, but are now missing, must be deleted\n      for (const key in properties) {\n        if (!newProperties.hasOwnProperty(key)) {\n          delete node[key]\n        }\n      }\n\n      break\n    }\n\n    case 'set_selection': {\n      const { newProperties } = op\n\n      if (newProperties == null) {\n        selection = newProperties\n      } else {\n        if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = { ...newProperties }\n        }\n\n        for (const key in newProperties) {\n          const value = newProperties[key]\n\n          if (value == null) {\n            if (key === 'anchor' || key === 'focus') {\n              throw new Error(`Cannot remove the \"${key}\" selection property`)\n            }\n\n            delete selection[key]\n          } else {\n            selection[key] = value\n          }\n        }\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const { path, position, properties } = op\n\n      if (path.length === 0) {\n        throw new Error(\n          `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n        )\n      }\n\n      const node = Node.get(editor, path)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n      let newNode: Descendant\n\n      if (Text.isText(node)) {\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n        newNode = {\n          ...(properties as Partial<Text>),\n          text: after,\n        }\n      } else {\n        const before = node.children.slice(0, position)\n        const after = node.children.slice(position)\n        node.children = before\n\n        newNode = {\n          ...(properties as Partial<Element>),\n          children: after,\n        }\n      }\n\n      parent.children.splice(index + 1, 0, newNode)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n  }\n  return selection\n}\n\nexport const GeneralTransforms: GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation): void {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    try {\n      selection = applyToDraft(editor, selection, op)\n    } finally {\n      editor.children = finishDraft(editor.children)\n\n      if (selection) {\n        editor.selection = isDraft(selection)\n          ? (finishDraft(selection) as Range)\n          : selection\n      } else {\n        editor.selection = null\n      }\n    }\n  },\n}\n","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(val) {\n  return val != null && typeof val === 'object' && Array.isArray(val) === false;\n}\n\n/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObjectObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport default isPlainObject;\n","/*! https://mths.be/esrever v0.2.0 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar regexSymbolWithCombiningMarks = /([\\0-\\u02FF\\u0370-\\u1AAF\\u1B00-\\u1DBF\\u1E00-\\u20CF\\u2100-\\uD7FF\\uE000-\\uFE1F\\uFE30-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])([\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]+)/g;\n\tvar regexSurrogatePair = /([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])/g;\n\n\tvar reverse = function(string) {\n\t\t// Step 1: deal with combining marks and astral symbols (surrogate pairs)\n\t\tstring = string\n\t\t\t// Swap symbols with their combining marks so the combining marks go first\n\t\t\t.replace(regexSymbolWithCombiningMarks, function($0, $1, $2) {\n\t\t\t\t// Reverse the combining marks so they will end up in the same order\n\t\t\t\t// later on (after another round of reversing)\n\t\t\t\treturn reverse($2) + $1;\n\t\t\t})\n\t\t\t// Swap high and low surrogates so the low surrogates go first\n\t\t\t.replace(regexSurrogatePair, '$2$1');\n\t\t// Step 2: reverse the code units in the string\n\t\tvar result = '';\n\t\tvar index = string.length;\n\t\twhile (index--) {\n\t\t\tresult += string.charAt(index);\n\t\t}\n\t\treturn result;\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar esrever = {\n\t\t'version': '0.2.0',\n\t\t'reverse': reverse\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn esrever;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = esrever;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in esrever) {\n\t\t\t\tesrever.hasOwnProperty(key) && (freeExports[key] = esrever[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.esrever = esrever;\n\t}\n\n}(this));\n"],"sourceRoot":""}