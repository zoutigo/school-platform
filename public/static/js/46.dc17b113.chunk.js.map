{"version":3,"sources":["../../../src/components/SlateEditor.tsx","../../../src/components/hotkeyHooks.ts"],"names":[],"mappings":"qOASM,EAAe,aAAS,WAAM,gEAE9B,EAAgB,IAAM,MAC1B,SAAC,GAMS,MAAsD,EAA/C,QAAE,EAA6C,EAA5B,kBAAE,EAA0B,EAAlB,SAAE,EAAgB,EAAL,YACnD,EAAa,CACjB,YAAW,IACX,WAAU,KAEN,EAAgB,YACpB,CAAE,QAAO,EAAE,kBAAiB,EAAE,WAAU,GACxC,IAEI,EAAa,YAAe,CAAE,QAAO,EAAE,WAAU,GAAI,IACrD,ECnBkB,SAC1B,EAKA,G,IAJE,EAAO,UAMH,EAAS,cAEb,OAAK,IAAM,aAAY,SAAC,GAgBxB,OAfI,EACD,QAAO,SAAC,GAAW,mBACnB,SAAQ,SAAC,GACJ,IAAS,EAAO,OAAQ,KAC1B,EAAM,iBACO,YAAyB,EAAQ,GAE5C,YAAa,EAAQ,GAErB,YAAU,EAAQ,OAMtB,IAAS,CAAC,QAAS,SAAU,IAC/B,EAAM,kBACC,GAGL,IAAS,cAAe,IAC1B,EAAM,iBACN,EAAO,WAAW,OACX,QAHT,IAKC,GDjBiB,CAAa,CAAE,QAAO,GAAI,IAEtC,EAAgB,cACtB,OACE,kBAAC,IAAQ,CACP,YAAa,OAAW,EAAY,EACpC,SAAU,GAAiB,EAC3B,cAAe,EACf,WAAY,EACZ,UAAW,OAAW,EAAY,OA2B3B,cAAM,MArBD,SAAC,GACX,MAA+B,EAAxB,QAAE,EAAsB,EAAf,QAAE,EAAa,EAAL,SAC1B,EAAM,cAAL,EACT,OACE,qCACI,GAAY,GACZ,kBAAC,EAAY,CACX,QAAS,EAAM,QACf,aAAc,EAAM,eAGxB,kBAAC,EAAa,CACZ,YAAa,EAAE,EAAM,aAAa,aAClC,SAAU,EACV,QAAS,EACT,kBAAmB,EAAM","file":"static/js/46.dc17b113.chunk.js","sourcesContent":["import { lazyLoad, useUiTranslator } from '@react-page/editor';\nimport React from 'react';\nimport { Editable, useFocused, useSelected } from 'slate-react';\nimport { useDialogIsVisible } from './DialogVisibleProvider';\nimport { useOnKeyDown } from './hotkeyHooks';\nimport { useRenderElement, useRenderLeave } from './renderHooks';\nvar HoverButtons = lazyLoad(function () { return import('./HoverButtons'); });\nvar SlateEditable = React.memo(function (props) {\n    var plugins = props.plugins, defaultPluginType = props.defaultPluginType, readOnly = props.readOnly, placeholder = props.placeholder;\n    var injections = {\n        useSelected: useSelected,\n        useFocused: useFocused,\n    };\n    var renderElement = useRenderElement({ plugins: plugins, defaultPluginType: defaultPluginType, injections: injections }, []);\n    var renderLeaf = useRenderLeave({ plugins: plugins, injections: injections }, []);\n    var onKeyDown = useOnKeyDown({ plugins: plugins }, []);\n    // this is required so that dialogs & controls don't mess with slate's selection\n    var dialogVisible = useDialogIsVisible();\n    return (React.createElement(Editable, { placeholder: readOnly ? undefined : placeholder, readOnly: dialogVisible || readOnly, renderElement: renderElement, renderLeaf: renderLeaf, onKeyDown: readOnly ? undefined : onKeyDown }));\n});\nvar SlateEditor = function (props) {\n    var plugins = props.plugins, focused = props.focused, readOnly = props.readOnly;\n    var t = useUiTranslator().t;\n    return (React.createElement(React.Fragment, null,\n        !readOnly && focused && (React.createElement(HoverButtons, { plugins: props.plugins, translations: props.translations })),\n        React.createElement(SlateEditable, { placeholder: t(props.translations.placeholder), readOnly: readOnly, plugins: plugins, defaultPluginType: props.defaultPluginType })));\n};\nexport default React.memo(SlateEditor);\n//# sourceMappingURL=SlateEditor.js.map","import isHotkey from 'is-hotkey';\nimport React from 'react';\nimport { useSlate } from 'slate-react';\nimport { addPlugin } from '../hooks/useAddPlugin';\nimport { getCurrentNodeWithPlugin } from '../hooks/useCurrentNodeWithPlugin';\nimport { removePlugin } from '../hooks/useRemovePlugin';\nexport var useOnKeyDown = function (_a, deps) {\n    var plugins = _a.plugins;\n    var editor = useSlate();\n    return React.useCallback(function (event) {\n        plugins\n            .filter(function (plugin) { return plugin.hotKey; })\n            .forEach(function (plugin) {\n            if (isHotkey(plugin.hotKey, event)) {\n                event.preventDefault();\n                var node = getCurrentNodeWithPlugin(editor, plugin);\n                if (node) {\n                    removePlugin(editor, plugin);\n                }\n                else {\n                    addPlugin(editor, plugin);\n                }\n            }\n        });\n        // we need to prevent slate from handling undo and redo\n        if (isHotkey(['mod+z', 'mod+y'], event)) {\n            event.preventDefault();\n            return true;\n        }\n        if (isHotkey('shift+enter', event)) {\n            event.preventDefault();\n            editor.insertText('\\n');\n            return true;\n        }\n    }, deps);\n};\n//# sourceMappingURL=hotkeyHooks.js.map"],"sourceRoot":""}